// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zenoss/cloud/data_receiver.proto

package com.zenoss.cloud;

public interface MetricBatchOrBuilder extends
    // @@protoc_insertion_point(interface_extends:zenoss.cloud.MetricBatch)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Tags that apply to all metrics in the batch
   * </pre>
   *
   * <code>map&lt;string, string&gt; global_tags = 2 [json_name = "globalTags"];</code>
   */
  int getGlobalTagsCount();
  /**
   * <pre>
   * Tags that apply to all metrics in the batch
   * </pre>
   *
   * <code>map&lt;string, string&gt; global_tags = 2 [json_name = "globalTags"];</code>
   */
  boolean containsGlobalTags(
      java.lang.String key);
  /**
   * Use {@link #getGlobalTagsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getGlobalTags();
  /**
   * <pre>
   * Tags that apply to all metrics in the batch
   * </pre>
   *
   * <code>map&lt;string, string&gt; global_tags = 2 [json_name = "globalTags"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getGlobalTagsMap();
  /**
   * <pre>
   * Tags that apply to all metrics in the batch
   * </pre>
   *
   * <code>map&lt;string, string&gt; global_tags = 2 [json_name = "globalTags"];</code>
   */
  /* nullable */
java.lang.String getGlobalTagsOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Tags that apply to all metrics in the batch
   * </pre>
   *
   * <code>map&lt;string, string&gt; global_tags = 2 [json_name = "globalTags"];</code>
   */
  java.lang.String getGlobalTagsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * The metrics
   * </pre>
   *
   * <code>repeated .zenoss.cloud.MetricWrapper metrics = 3 [json_name = "metrics"];</code>
   */
  java.util.List<com.zenoss.cloud.MetricWrapper> 
      getMetricsList();
  /**
   * <pre>
   * The metrics
   * </pre>
   *
   * <code>repeated .zenoss.cloud.MetricWrapper metrics = 3 [json_name = "metrics"];</code>
   */
  com.zenoss.cloud.MetricWrapper getMetrics(int index);
  /**
   * <pre>
   * The metrics
   * </pre>
   *
   * <code>repeated .zenoss.cloud.MetricWrapper metrics = 3 [json_name = "metrics"];</code>
   */
  int getMetricsCount();
  /**
   * <pre>
   * The metrics
   * </pre>
   *
   * <code>repeated .zenoss.cloud.MetricWrapper metrics = 3 [json_name = "metrics"];</code>
   */
  java.util.List<? extends com.zenoss.cloud.MetricWrapperOrBuilder> 
      getMetricsOrBuilderList();
  /**
   * <pre>
   * The metrics
   * </pre>
   *
   * <code>repeated .zenoss.cloud.MetricWrapper metrics = 3 [json_name = "metrics"];</code>
   */
  com.zenoss.cloud.MetricWrapperOrBuilder getMetricsOrBuilder(
      int index);
}
