// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zenoss/cloud/data_receiver.proto

package org.zenoss.cloud.dataReceiver;

/**
 * Protobuf type {@code zenoss.cloud.MetricWrapper}
 */
public final class MetricWrapper extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:zenoss.cloud.MetricWrapper)
    MetricWrapperOrBuilder {
private static final long serialVersionUID = 0L;
  // Use MetricWrapper.newBuilder() to construct.
  private MetricWrapper(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private MetricWrapper() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new MetricWrapper();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.zenoss.cloud.dataReceiver.DataReceiver.internal_static_zenoss_cloud_MetricWrapper_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.zenoss.cloud.dataReceiver.DataReceiver.internal_static_zenoss_cloud_MetricWrapper_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.zenoss.cloud.dataReceiver.MetricWrapper.class, org.zenoss.cloud.dataReceiver.MetricWrapper.Builder.class);
  }

  private int metricTypeCase_ = 0;
  private java.lang.Object metricType_;
  public enum MetricTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    TAGGED(1),
    COMPACT(2),
    CANONICAL(3),
    METRICTYPE_NOT_SET(0);
    private final int value;
    private MetricTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MetricTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static MetricTypeCase forNumber(int value) {
      switch (value) {
        case 1: return TAGGED;
        case 2: return COMPACT;
        case 3: return CANONICAL;
        case 0: return METRICTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public MetricTypeCase
  getMetricTypeCase() {
    return MetricTypeCase.forNumber(
        metricTypeCase_);
  }

  public static final int TAGGED_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Verbose format
   * </pre>
   *
   * <code>.zenoss.cloud.TaggedMetric tagged = 1 [json_name = "tagged"];</code>
   * @return Whether the tagged field is set.
   */
  @java.lang.Override
  public boolean hasTagged() {
    return metricTypeCase_ == 1;
  }
  /**
   * <pre>
   * Verbose format
   * </pre>
   *
   * <code>.zenoss.cloud.TaggedMetric tagged = 1 [json_name = "tagged"];</code>
   * @return The tagged.
   */
  @java.lang.Override
  public org.zenoss.cloud.dataReceiver.TaggedMetric getTagged() {
    if (metricTypeCase_ == 1) {
       return (org.zenoss.cloud.dataReceiver.TaggedMetric) metricType_;
    }
    return org.zenoss.cloud.dataReceiver.TaggedMetric.getDefaultInstance();
  }
  /**
   * <pre>
   * Verbose format
   * </pre>
   *
   * <code>.zenoss.cloud.TaggedMetric tagged = 1 [json_name = "tagged"];</code>
   */
  @java.lang.Override
  public org.zenoss.cloud.dataReceiver.TaggedMetricOrBuilder getTaggedOrBuilder() {
    if (metricTypeCase_ == 1) {
       return (org.zenoss.cloud.dataReceiver.TaggedMetric) metricType_;
    }
    return org.zenoss.cloud.dataReceiver.TaggedMetric.getDefaultInstance();
  }

  public static final int COMPACT_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Compact format
   * </pre>
   *
   * <code>.zenoss.cloud.CompactMetric compact = 2 [json_name = "compact"];</code>
   * @return Whether the compact field is set.
   */
  @java.lang.Override
  public boolean hasCompact() {
    return metricTypeCase_ == 2;
  }
  /**
   * <pre>
   * Compact format
   * </pre>
   *
   * <code>.zenoss.cloud.CompactMetric compact = 2 [json_name = "compact"];</code>
   * @return The compact.
   */
  @java.lang.Override
  public org.zenoss.cloud.dataReceiver.CompactMetric getCompact() {
    if (metricTypeCase_ == 2) {
       return (org.zenoss.cloud.dataReceiver.CompactMetric) metricType_;
    }
    return org.zenoss.cloud.dataReceiver.CompactMetric.getDefaultInstance();
  }
  /**
   * <pre>
   * Compact format
   * </pre>
   *
   * <code>.zenoss.cloud.CompactMetric compact = 2 [json_name = "compact"];</code>
   */
  @java.lang.Override
  public org.zenoss.cloud.dataReceiver.CompactMetricOrBuilder getCompactOrBuilder() {
    if (metricTypeCase_ == 2) {
       return (org.zenoss.cloud.dataReceiver.CompactMetric) metricType_;
    }
    return org.zenoss.cloud.dataReceiver.CompactMetric.getDefaultInstance();
  }

  public static final int CANONICAL_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Canonical format
   * </pre>
   *
   * <code>.zenoss.cloud.Metric canonical = 3 [json_name = "canonical"];</code>
   * @return Whether the canonical field is set.
   */
  @java.lang.Override
  public boolean hasCanonical() {
    return metricTypeCase_ == 3;
  }
  /**
   * <pre>
   * Canonical format
   * </pre>
   *
   * <code>.zenoss.cloud.Metric canonical = 3 [json_name = "canonical"];</code>
   * @return The canonical.
   */
  @java.lang.Override
  public org.zenoss.cloud.dataReceiver.Metric getCanonical() {
    if (metricTypeCase_ == 3) {
       return (org.zenoss.cloud.dataReceiver.Metric) metricType_;
    }
    return org.zenoss.cloud.dataReceiver.Metric.getDefaultInstance();
  }
  /**
   * <pre>
   * Canonical format
   * </pre>
   *
   * <code>.zenoss.cloud.Metric canonical = 3 [json_name = "canonical"];</code>
   */
  @java.lang.Override
  public org.zenoss.cloud.dataReceiver.MetricOrBuilder getCanonicalOrBuilder() {
    if (metricTypeCase_ == 3) {
       return (org.zenoss.cloud.dataReceiver.Metric) metricType_;
    }
    return org.zenoss.cloud.dataReceiver.Metric.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (metricTypeCase_ == 1) {
      output.writeMessage(1, (org.zenoss.cloud.dataReceiver.TaggedMetric) metricType_);
    }
    if (metricTypeCase_ == 2) {
      output.writeMessage(2, (org.zenoss.cloud.dataReceiver.CompactMetric) metricType_);
    }
    if (metricTypeCase_ == 3) {
      output.writeMessage(3, (org.zenoss.cloud.dataReceiver.Metric) metricType_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (metricTypeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (org.zenoss.cloud.dataReceiver.TaggedMetric) metricType_);
    }
    if (metricTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.zenoss.cloud.dataReceiver.CompactMetric) metricType_);
    }
    if (metricTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.zenoss.cloud.dataReceiver.Metric) metricType_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.zenoss.cloud.dataReceiver.MetricWrapper)) {
      return super.equals(obj);
    }
    org.zenoss.cloud.dataReceiver.MetricWrapper other = (org.zenoss.cloud.dataReceiver.MetricWrapper) obj;

    if (!getMetricTypeCase().equals(other.getMetricTypeCase())) return false;
    switch (metricTypeCase_) {
      case 1:
        if (!getTagged()
            .equals(other.getTagged())) return false;
        break;
      case 2:
        if (!getCompact()
            .equals(other.getCompact())) return false;
        break;
      case 3:
        if (!getCanonical()
            .equals(other.getCanonical())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (metricTypeCase_) {
      case 1:
        hash = (37 * hash) + TAGGED_FIELD_NUMBER;
        hash = (53 * hash) + getTagged().hashCode();
        break;
      case 2:
        hash = (37 * hash) + COMPACT_FIELD_NUMBER;
        hash = (53 * hash) + getCompact().hashCode();
        break;
      case 3:
        hash = (37 * hash) + CANONICAL_FIELD_NUMBER;
        hash = (53 * hash) + getCanonical().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.zenoss.cloud.dataReceiver.MetricWrapper parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.zenoss.cloud.dataReceiver.MetricWrapper parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.zenoss.cloud.dataReceiver.MetricWrapper parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.zenoss.cloud.dataReceiver.MetricWrapper parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.zenoss.cloud.dataReceiver.MetricWrapper parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.zenoss.cloud.dataReceiver.MetricWrapper parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.zenoss.cloud.dataReceiver.MetricWrapper parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.zenoss.cloud.dataReceiver.MetricWrapper parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.zenoss.cloud.dataReceiver.MetricWrapper parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.zenoss.cloud.dataReceiver.MetricWrapper parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.zenoss.cloud.dataReceiver.MetricWrapper parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.zenoss.cloud.dataReceiver.MetricWrapper parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.zenoss.cloud.dataReceiver.MetricWrapper prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code zenoss.cloud.MetricWrapper}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:zenoss.cloud.MetricWrapper)
      org.zenoss.cloud.dataReceiver.MetricWrapperOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.zenoss.cloud.dataReceiver.DataReceiver.internal_static_zenoss_cloud_MetricWrapper_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.zenoss.cloud.dataReceiver.DataReceiver.internal_static_zenoss_cloud_MetricWrapper_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.zenoss.cloud.dataReceiver.MetricWrapper.class, org.zenoss.cloud.dataReceiver.MetricWrapper.Builder.class);
    }

    // Construct using org.zenoss.cloud.dataReceiver.MetricWrapper.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (taggedBuilder_ != null) {
        taggedBuilder_.clear();
      }
      if (compactBuilder_ != null) {
        compactBuilder_.clear();
      }
      if (canonicalBuilder_ != null) {
        canonicalBuilder_.clear();
      }
      metricTypeCase_ = 0;
      metricType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.zenoss.cloud.dataReceiver.DataReceiver.internal_static_zenoss_cloud_MetricWrapper_descriptor;
    }

    @java.lang.Override
    public org.zenoss.cloud.dataReceiver.MetricWrapper getDefaultInstanceForType() {
      return org.zenoss.cloud.dataReceiver.MetricWrapper.getDefaultInstance();
    }

    @java.lang.Override
    public org.zenoss.cloud.dataReceiver.MetricWrapper build() {
      org.zenoss.cloud.dataReceiver.MetricWrapper result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.zenoss.cloud.dataReceiver.MetricWrapper buildPartial() {
      org.zenoss.cloud.dataReceiver.MetricWrapper result = new org.zenoss.cloud.dataReceiver.MetricWrapper(this);
      if (metricTypeCase_ == 1) {
        if (taggedBuilder_ == null) {
          result.metricType_ = metricType_;
        } else {
          result.metricType_ = taggedBuilder_.build();
        }
      }
      if (metricTypeCase_ == 2) {
        if (compactBuilder_ == null) {
          result.metricType_ = metricType_;
        } else {
          result.metricType_ = compactBuilder_.build();
        }
      }
      if (metricTypeCase_ == 3) {
        if (canonicalBuilder_ == null) {
          result.metricType_ = metricType_;
        } else {
          result.metricType_ = canonicalBuilder_.build();
        }
      }
      result.metricTypeCase_ = metricTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.zenoss.cloud.dataReceiver.MetricWrapper) {
        return mergeFrom((org.zenoss.cloud.dataReceiver.MetricWrapper)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.zenoss.cloud.dataReceiver.MetricWrapper other) {
      if (other == org.zenoss.cloud.dataReceiver.MetricWrapper.getDefaultInstance()) return this;
      switch (other.getMetricTypeCase()) {
        case TAGGED: {
          mergeTagged(other.getTagged());
          break;
        }
        case COMPACT: {
          mergeCompact(other.getCompact());
          break;
        }
        case CANONICAL: {
          mergeCanonical(other.getCanonical());
          break;
        }
        case METRICTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getTaggedFieldBuilder().getBuilder(),
                  extensionRegistry);
              metricTypeCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getCompactFieldBuilder().getBuilder(),
                  extensionRegistry);
              metricTypeCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getCanonicalFieldBuilder().getBuilder(),
                  extensionRegistry);
              metricTypeCase_ = 3;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int metricTypeCase_ = 0;
    private java.lang.Object metricType_;
    public MetricTypeCase
        getMetricTypeCase() {
      return MetricTypeCase.forNumber(
          metricTypeCase_);
    }

    public Builder clearMetricType() {
      metricTypeCase_ = 0;
      metricType_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        org.zenoss.cloud.dataReceiver.TaggedMetric, org.zenoss.cloud.dataReceiver.TaggedMetric.Builder, org.zenoss.cloud.dataReceiver.TaggedMetricOrBuilder> taggedBuilder_;
    /**
     * <pre>
     * Verbose format
     * </pre>
     *
     * <code>.zenoss.cloud.TaggedMetric tagged = 1 [json_name = "tagged"];</code>
     * @return Whether the tagged field is set.
     */
    @java.lang.Override
    public boolean hasTagged() {
      return metricTypeCase_ == 1;
    }
    /**
     * <pre>
     * Verbose format
     * </pre>
     *
     * <code>.zenoss.cloud.TaggedMetric tagged = 1 [json_name = "tagged"];</code>
     * @return The tagged.
     */
    @java.lang.Override
    public org.zenoss.cloud.dataReceiver.TaggedMetric getTagged() {
      if (taggedBuilder_ == null) {
        if (metricTypeCase_ == 1) {
          return (org.zenoss.cloud.dataReceiver.TaggedMetric) metricType_;
        }
        return org.zenoss.cloud.dataReceiver.TaggedMetric.getDefaultInstance();
      } else {
        if (metricTypeCase_ == 1) {
          return taggedBuilder_.getMessage();
        }
        return org.zenoss.cloud.dataReceiver.TaggedMetric.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Verbose format
     * </pre>
     *
     * <code>.zenoss.cloud.TaggedMetric tagged = 1 [json_name = "tagged"];</code>
     */
    public Builder setTagged(org.zenoss.cloud.dataReceiver.TaggedMetric value) {
      if (taggedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        metricType_ = value;
        onChanged();
      } else {
        taggedBuilder_.setMessage(value);
      }
      metricTypeCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Verbose format
     * </pre>
     *
     * <code>.zenoss.cloud.TaggedMetric tagged = 1 [json_name = "tagged"];</code>
     */
    public Builder setTagged(
        org.zenoss.cloud.dataReceiver.TaggedMetric.Builder builderForValue) {
      if (taggedBuilder_ == null) {
        metricType_ = builderForValue.build();
        onChanged();
      } else {
        taggedBuilder_.setMessage(builderForValue.build());
      }
      metricTypeCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Verbose format
     * </pre>
     *
     * <code>.zenoss.cloud.TaggedMetric tagged = 1 [json_name = "tagged"];</code>
     */
    public Builder mergeTagged(org.zenoss.cloud.dataReceiver.TaggedMetric value) {
      if (taggedBuilder_ == null) {
        if (metricTypeCase_ == 1 &&
            metricType_ != org.zenoss.cloud.dataReceiver.TaggedMetric.getDefaultInstance()) {
          metricType_ = org.zenoss.cloud.dataReceiver.TaggedMetric.newBuilder((org.zenoss.cloud.dataReceiver.TaggedMetric) metricType_)
              .mergeFrom(value).buildPartial();
        } else {
          metricType_ = value;
        }
        onChanged();
      } else {
        if (metricTypeCase_ == 1) {
          taggedBuilder_.mergeFrom(value);
        } else {
          taggedBuilder_.setMessage(value);
        }
      }
      metricTypeCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Verbose format
     * </pre>
     *
     * <code>.zenoss.cloud.TaggedMetric tagged = 1 [json_name = "tagged"];</code>
     */
    public Builder clearTagged() {
      if (taggedBuilder_ == null) {
        if (metricTypeCase_ == 1) {
          metricTypeCase_ = 0;
          metricType_ = null;
          onChanged();
        }
      } else {
        if (metricTypeCase_ == 1) {
          metricTypeCase_ = 0;
          metricType_ = null;
        }
        taggedBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Verbose format
     * </pre>
     *
     * <code>.zenoss.cloud.TaggedMetric tagged = 1 [json_name = "tagged"];</code>
     */
    public org.zenoss.cloud.dataReceiver.TaggedMetric.Builder getTaggedBuilder() {
      return getTaggedFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Verbose format
     * </pre>
     *
     * <code>.zenoss.cloud.TaggedMetric tagged = 1 [json_name = "tagged"];</code>
     */
    @java.lang.Override
    public org.zenoss.cloud.dataReceiver.TaggedMetricOrBuilder getTaggedOrBuilder() {
      if ((metricTypeCase_ == 1) && (taggedBuilder_ != null)) {
        return taggedBuilder_.getMessageOrBuilder();
      } else {
        if (metricTypeCase_ == 1) {
          return (org.zenoss.cloud.dataReceiver.TaggedMetric) metricType_;
        }
        return org.zenoss.cloud.dataReceiver.TaggedMetric.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Verbose format
     * </pre>
     *
     * <code>.zenoss.cloud.TaggedMetric tagged = 1 [json_name = "tagged"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.zenoss.cloud.dataReceiver.TaggedMetric, org.zenoss.cloud.dataReceiver.TaggedMetric.Builder, org.zenoss.cloud.dataReceiver.TaggedMetricOrBuilder> 
        getTaggedFieldBuilder() {
      if (taggedBuilder_ == null) {
        if (!(metricTypeCase_ == 1)) {
          metricType_ = org.zenoss.cloud.dataReceiver.TaggedMetric.getDefaultInstance();
        }
        taggedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.zenoss.cloud.dataReceiver.TaggedMetric, org.zenoss.cloud.dataReceiver.TaggedMetric.Builder, org.zenoss.cloud.dataReceiver.TaggedMetricOrBuilder>(
                (org.zenoss.cloud.dataReceiver.TaggedMetric) metricType_,
                getParentForChildren(),
                isClean());
        metricType_ = null;
      }
      metricTypeCase_ = 1;
      onChanged();;
      return taggedBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.zenoss.cloud.dataReceiver.CompactMetric, org.zenoss.cloud.dataReceiver.CompactMetric.Builder, org.zenoss.cloud.dataReceiver.CompactMetricOrBuilder> compactBuilder_;
    /**
     * <pre>
     * Compact format
     * </pre>
     *
     * <code>.zenoss.cloud.CompactMetric compact = 2 [json_name = "compact"];</code>
     * @return Whether the compact field is set.
     */
    @java.lang.Override
    public boolean hasCompact() {
      return metricTypeCase_ == 2;
    }
    /**
     * <pre>
     * Compact format
     * </pre>
     *
     * <code>.zenoss.cloud.CompactMetric compact = 2 [json_name = "compact"];</code>
     * @return The compact.
     */
    @java.lang.Override
    public org.zenoss.cloud.dataReceiver.CompactMetric getCompact() {
      if (compactBuilder_ == null) {
        if (metricTypeCase_ == 2) {
          return (org.zenoss.cloud.dataReceiver.CompactMetric) metricType_;
        }
        return org.zenoss.cloud.dataReceiver.CompactMetric.getDefaultInstance();
      } else {
        if (metricTypeCase_ == 2) {
          return compactBuilder_.getMessage();
        }
        return org.zenoss.cloud.dataReceiver.CompactMetric.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Compact format
     * </pre>
     *
     * <code>.zenoss.cloud.CompactMetric compact = 2 [json_name = "compact"];</code>
     */
    public Builder setCompact(org.zenoss.cloud.dataReceiver.CompactMetric value) {
      if (compactBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        metricType_ = value;
        onChanged();
      } else {
        compactBuilder_.setMessage(value);
      }
      metricTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Compact format
     * </pre>
     *
     * <code>.zenoss.cloud.CompactMetric compact = 2 [json_name = "compact"];</code>
     */
    public Builder setCompact(
        org.zenoss.cloud.dataReceiver.CompactMetric.Builder builderForValue) {
      if (compactBuilder_ == null) {
        metricType_ = builderForValue.build();
        onChanged();
      } else {
        compactBuilder_.setMessage(builderForValue.build());
      }
      metricTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Compact format
     * </pre>
     *
     * <code>.zenoss.cloud.CompactMetric compact = 2 [json_name = "compact"];</code>
     */
    public Builder mergeCompact(org.zenoss.cloud.dataReceiver.CompactMetric value) {
      if (compactBuilder_ == null) {
        if (metricTypeCase_ == 2 &&
            metricType_ != org.zenoss.cloud.dataReceiver.CompactMetric.getDefaultInstance()) {
          metricType_ = org.zenoss.cloud.dataReceiver.CompactMetric.newBuilder((org.zenoss.cloud.dataReceiver.CompactMetric) metricType_)
              .mergeFrom(value).buildPartial();
        } else {
          metricType_ = value;
        }
        onChanged();
      } else {
        if (metricTypeCase_ == 2) {
          compactBuilder_.mergeFrom(value);
        } else {
          compactBuilder_.setMessage(value);
        }
      }
      metricTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Compact format
     * </pre>
     *
     * <code>.zenoss.cloud.CompactMetric compact = 2 [json_name = "compact"];</code>
     */
    public Builder clearCompact() {
      if (compactBuilder_ == null) {
        if (metricTypeCase_ == 2) {
          metricTypeCase_ = 0;
          metricType_ = null;
          onChanged();
        }
      } else {
        if (metricTypeCase_ == 2) {
          metricTypeCase_ = 0;
          metricType_ = null;
        }
        compactBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Compact format
     * </pre>
     *
     * <code>.zenoss.cloud.CompactMetric compact = 2 [json_name = "compact"];</code>
     */
    public org.zenoss.cloud.dataReceiver.CompactMetric.Builder getCompactBuilder() {
      return getCompactFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Compact format
     * </pre>
     *
     * <code>.zenoss.cloud.CompactMetric compact = 2 [json_name = "compact"];</code>
     */
    @java.lang.Override
    public org.zenoss.cloud.dataReceiver.CompactMetricOrBuilder getCompactOrBuilder() {
      if ((metricTypeCase_ == 2) && (compactBuilder_ != null)) {
        return compactBuilder_.getMessageOrBuilder();
      } else {
        if (metricTypeCase_ == 2) {
          return (org.zenoss.cloud.dataReceiver.CompactMetric) metricType_;
        }
        return org.zenoss.cloud.dataReceiver.CompactMetric.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Compact format
     * </pre>
     *
     * <code>.zenoss.cloud.CompactMetric compact = 2 [json_name = "compact"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.zenoss.cloud.dataReceiver.CompactMetric, org.zenoss.cloud.dataReceiver.CompactMetric.Builder, org.zenoss.cloud.dataReceiver.CompactMetricOrBuilder> 
        getCompactFieldBuilder() {
      if (compactBuilder_ == null) {
        if (!(metricTypeCase_ == 2)) {
          metricType_ = org.zenoss.cloud.dataReceiver.CompactMetric.getDefaultInstance();
        }
        compactBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.zenoss.cloud.dataReceiver.CompactMetric, org.zenoss.cloud.dataReceiver.CompactMetric.Builder, org.zenoss.cloud.dataReceiver.CompactMetricOrBuilder>(
                (org.zenoss.cloud.dataReceiver.CompactMetric) metricType_,
                getParentForChildren(),
                isClean());
        metricType_ = null;
      }
      metricTypeCase_ = 2;
      onChanged();;
      return compactBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.zenoss.cloud.dataReceiver.Metric, org.zenoss.cloud.dataReceiver.Metric.Builder, org.zenoss.cloud.dataReceiver.MetricOrBuilder> canonicalBuilder_;
    /**
     * <pre>
     * Canonical format
     * </pre>
     *
     * <code>.zenoss.cloud.Metric canonical = 3 [json_name = "canonical"];</code>
     * @return Whether the canonical field is set.
     */
    @java.lang.Override
    public boolean hasCanonical() {
      return metricTypeCase_ == 3;
    }
    /**
     * <pre>
     * Canonical format
     * </pre>
     *
     * <code>.zenoss.cloud.Metric canonical = 3 [json_name = "canonical"];</code>
     * @return The canonical.
     */
    @java.lang.Override
    public org.zenoss.cloud.dataReceiver.Metric getCanonical() {
      if (canonicalBuilder_ == null) {
        if (metricTypeCase_ == 3) {
          return (org.zenoss.cloud.dataReceiver.Metric) metricType_;
        }
        return org.zenoss.cloud.dataReceiver.Metric.getDefaultInstance();
      } else {
        if (metricTypeCase_ == 3) {
          return canonicalBuilder_.getMessage();
        }
        return org.zenoss.cloud.dataReceiver.Metric.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Canonical format
     * </pre>
     *
     * <code>.zenoss.cloud.Metric canonical = 3 [json_name = "canonical"];</code>
     */
    public Builder setCanonical(org.zenoss.cloud.dataReceiver.Metric value) {
      if (canonicalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        metricType_ = value;
        onChanged();
      } else {
        canonicalBuilder_.setMessage(value);
      }
      metricTypeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Canonical format
     * </pre>
     *
     * <code>.zenoss.cloud.Metric canonical = 3 [json_name = "canonical"];</code>
     */
    public Builder setCanonical(
        org.zenoss.cloud.dataReceiver.Metric.Builder builderForValue) {
      if (canonicalBuilder_ == null) {
        metricType_ = builderForValue.build();
        onChanged();
      } else {
        canonicalBuilder_.setMessage(builderForValue.build());
      }
      metricTypeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Canonical format
     * </pre>
     *
     * <code>.zenoss.cloud.Metric canonical = 3 [json_name = "canonical"];</code>
     */
    public Builder mergeCanonical(org.zenoss.cloud.dataReceiver.Metric value) {
      if (canonicalBuilder_ == null) {
        if (metricTypeCase_ == 3 &&
            metricType_ != org.zenoss.cloud.dataReceiver.Metric.getDefaultInstance()) {
          metricType_ = org.zenoss.cloud.dataReceiver.Metric.newBuilder((org.zenoss.cloud.dataReceiver.Metric) metricType_)
              .mergeFrom(value).buildPartial();
        } else {
          metricType_ = value;
        }
        onChanged();
      } else {
        if (metricTypeCase_ == 3) {
          canonicalBuilder_.mergeFrom(value);
        } else {
          canonicalBuilder_.setMessage(value);
        }
      }
      metricTypeCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Canonical format
     * </pre>
     *
     * <code>.zenoss.cloud.Metric canonical = 3 [json_name = "canonical"];</code>
     */
    public Builder clearCanonical() {
      if (canonicalBuilder_ == null) {
        if (metricTypeCase_ == 3) {
          metricTypeCase_ = 0;
          metricType_ = null;
          onChanged();
        }
      } else {
        if (metricTypeCase_ == 3) {
          metricTypeCase_ = 0;
          metricType_ = null;
        }
        canonicalBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Canonical format
     * </pre>
     *
     * <code>.zenoss.cloud.Metric canonical = 3 [json_name = "canonical"];</code>
     */
    public org.zenoss.cloud.dataReceiver.Metric.Builder getCanonicalBuilder() {
      return getCanonicalFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Canonical format
     * </pre>
     *
     * <code>.zenoss.cloud.Metric canonical = 3 [json_name = "canonical"];</code>
     */
    @java.lang.Override
    public org.zenoss.cloud.dataReceiver.MetricOrBuilder getCanonicalOrBuilder() {
      if ((metricTypeCase_ == 3) && (canonicalBuilder_ != null)) {
        return canonicalBuilder_.getMessageOrBuilder();
      } else {
        if (metricTypeCase_ == 3) {
          return (org.zenoss.cloud.dataReceiver.Metric) metricType_;
        }
        return org.zenoss.cloud.dataReceiver.Metric.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Canonical format
     * </pre>
     *
     * <code>.zenoss.cloud.Metric canonical = 3 [json_name = "canonical"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.zenoss.cloud.dataReceiver.Metric, org.zenoss.cloud.dataReceiver.Metric.Builder, org.zenoss.cloud.dataReceiver.MetricOrBuilder> 
        getCanonicalFieldBuilder() {
      if (canonicalBuilder_ == null) {
        if (!(metricTypeCase_ == 3)) {
          metricType_ = org.zenoss.cloud.dataReceiver.Metric.getDefaultInstance();
        }
        canonicalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.zenoss.cloud.dataReceiver.Metric, org.zenoss.cloud.dataReceiver.Metric.Builder, org.zenoss.cloud.dataReceiver.MetricOrBuilder>(
                (org.zenoss.cloud.dataReceiver.Metric) metricType_,
                getParentForChildren(),
                isClean());
        metricType_ = null;
      }
      metricTypeCase_ = 3;
      onChanged();;
      return canonicalBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:zenoss.cloud.MetricWrapper)
  }

  // @@protoc_insertion_point(class_scope:zenoss.cloud.MetricWrapper)
  private static final org.zenoss.cloud.dataReceiver.MetricWrapper DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.zenoss.cloud.dataReceiver.MetricWrapper();
  }

  public static org.zenoss.cloud.dataReceiver.MetricWrapper getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MetricWrapper>
      PARSER = new com.google.protobuf.AbstractParser<MetricWrapper>() {
    @java.lang.Override
    public MetricWrapper parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<MetricWrapper> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<MetricWrapper> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.zenoss.cloud.dataReceiver.MetricWrapper getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

