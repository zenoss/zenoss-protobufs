# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from zenoss.cloud import data_registry_pb2 as zenoss_dot_cloud_dot_data__registry__pb2


class DataRegistryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateOrUpdateMetric = channel.unary_unary(
                '/zenoss.cloud.DataRegistryService/CreateOrUpdateMetric',
                request_serializer=zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricRequest.SerializeToString,
                response_deserializer=zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricResponse.FromString,
                )
        self.CreateOrUpdateMetrics = channel.stream_unary(
                '/zenoss.cloud.DataRegistryService/CreateOrUpdateMetrics',
                request_serializer=zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricRequest.SerializeToString,
                response_deserializer=zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricsResponse.FromString,
                )
        self.UpdateMetric = channel.unary_unary(
                '/zenoss.cloud.DataRegistryService/UpdateMetric',
                request_serializer=zenoss_dot_cloud_dot_data__registry__pb2.UpdateMetricRequest.SerializeToString,
                response_deserializer=zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricResponse.FromString,
                )
        self.RegisterDefinition = channel.unary_unary(
                '/zenoss.cloud.DataRegistryService/RegisterDefinition',
                request_serializer=zenoss_dot_cloud_dot_data__registry__pb2.Definition.SerializeToString,
                response_deserializer=zenoss_dot_cloud_dot_data__registry__pb2.DefinitionResponse.FromString,
                )
        self.UpdateDefinition = channel.unary_unary(
                '/zenoss.cloud.DataRegistryService/UpdateDefinition',
                request_serializer=zenoss_dot_cloud_dot_data__registry__pb2.DefinitionUpdate.SerializeToString,
                response_deserializer=zenoss_dot_cloud_dot_data__registry__pb2.DefinitionResponse.FromString,
                )
        self.GetMetric = channel.unary_unary(
                '/zenoss.cloud.DataRegistryService/GetMetric',
                request_serializer=zenoss_dot_cloud_dot_data__registry__pb2.GetMetricRequest.SerializeToString,
                response_deserializer=zenoss_dot_cloud_dot_data__registry__pb2.GetMetricResponse.FromString,
                )


class DataRegistryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateOrUpdateMetric(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateOrUpdateMetrics(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMetric(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterDefinition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDefinition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetric(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataRegistryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateOrUpdateMetric': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrUpdateMetric,
                    request_deserializer=zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricRequest.FromString,
                    response_serializer=zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricResponse.SerializeToString,
            ),
            'CreateOrUpdateMetrics': grpc.stream_unary_rpc_method_handler(
                    servicer.CreateOrUpdateMetrics,
                    request_deserializer=zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricRequest.FromString,
                    response_serializer=zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricsResponse.SerializeToString,
            ),
            'UpdateMetric': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMetric,
                    request_deserializer=zenoss_dot_cloud_dot_data__registry__pb2.UpdateMetricRequest.FromString,
                    response_serializer=zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricResponse.SerializeToString,
            ),
            'RegisterDefinition': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterDefinition,
                    request_deserializer=zenoss_dot_cloud_dot_data__registry__pb2.Definition.FromString,
                    response_serializer=zenoss_dot_cloud_dot_data__registry__pb2.DefinitionResponse.SerializeToString,
            ),
            'UpdateDefinition': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDefinition,
                    request_deserializer=zenoss_dot_cloud_dot_data__registry__pb2.DefinitionUpdate.FromString,
                    response_serializer=zenoss_dot_cloud_dot_data__registry__pb2.DefinitionResponse.SerializeToString,
            ),
            'GetMetric': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetric,
                    request_deserializer=zenoss_dot_cloud_dot_data__registry__pb2.GetMetricRequest.FromString,
                    response_serializer=zenoss_dot_cloud_dot_data__registry__pb2.GetMetricResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zenoss.cloud.DataRegistryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataRegistryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateOrUpdateMetric(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zenoss.cloud.DataRegistryService/CreateOrUpdateMetric',
            zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricRequest.SerializeToString,
            zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateOrUpdateMetrics(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/zenoss.cloud.DataRegistryService/CreateOrUpdateMetrics',
            zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricRequest.SerializeToString,
            zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateMetric(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zenoss.cloud.DataRegistryService/UpdateMetric',
            zenoss_dot_cloud_dot_data__registry__pb2.UpdateMetricRequest.SerializeToString,
            zenoss_dot_cloud_dot_data__registry__pb2.RegisterMetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterDefinition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zenoss.cloud.DataRegistryService/RegisterDefinition',
            zenoss_dot_cloud_dot_data__registry__pb2.Definition.SerializeToString,
            zenoss_dot_cloud_dot_data__registry__pb2.DefinitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDefinition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zenoss.cloud.DataRegistryService/UpdateDefinition',
            zenoss_dot_cloud_dot_data__registry__pb2.DefinitionUpdate.SerializeToString,
            zenoss_dot_cloud_dot_data__registry__pb2.DefinitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMetric(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zenoss.cloud.DataRegistryService/GetMetric',
            zenoss_dot_cloud_dot_data__registry__pb2.GetMetricRequest.SerializeToString,
            zenoss_dot_cloud_dot_data__registry__pb2.GetMetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
