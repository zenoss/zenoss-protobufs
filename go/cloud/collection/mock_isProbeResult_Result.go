// Code generated by mockery v2.12.2. DO NOT EDIT.

package collection

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// mockIsProbeResult_Result is an autogenerated mock type for the isProbeResult_Result type
type mockIsProbeResult_Result struct {
	mock.Mock
}

type mockIsProbeResult_Result_Expecter struct {
	mock *mock.Mock
}

func (_m *mockIsProbeResult_Result) EXPECT() *mockIsProbeResult_Result_Expecter {
	return &mockIsProbeResult_Result_Expecter{mock: &_m.Mock}
}

// isProbeResult_Result provides a mock function with given fields:
func (_m *mockIsProbeResult_Result) isProbeResult_Result() {
	_m.Called()
}

// mockIsProbeResult_Result_isProbeResult_Result_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isProbeResult_Result'
type mockIsProbeResult_Result_isProbeResult_Result_Call struct {
	*mock.Call
}

// isProbeResult_Result is a helper method to define mock.On call
func (_e *mockIsProbeResult_Result_Expecter) isProbeResult_Result() *mockIsProbeResult_Result_isProbeResult_Result_Call {
	return &mockIsProbeResult_Result_isProbeResult_Result_Call{Call: _e.mock.On("isProbeResult_Result")}
}

func (_c *mockIsProbeResult_Result_isProbeResult_Result_Call) Run(run func()) *mockIsProbeResult_Result_isProbeResult_Result_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockIsProbeResult_Result_isProbeResult_Result_Call) Return() *mockIsProbeResult_Result_isProbeResult_Result_Call {
	_c.Call.Return()
	return _c
}

// newMockIsProbeResult_Result creates a new instance of mockIsProbeResult_Result. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func newMockIsProbeResult_Result(t testing.TB) *mockIsProbeResult_Result {
	mock := &mockIsProbeResult_Result{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
