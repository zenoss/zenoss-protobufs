// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: zenoss/cloud/collection_cfg.proto

package collection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CollectionConfigService_WaitForProbeConfig_FullMethodName = "/zenoss.cloud.collection_cfg.CollectionConfigService/WaitForProbeConfig"
	CollectionConfigService_GetConfigStream_FullMethodName    = "/zenoss.cloud.collection_cfg.CollectionConfigService/GetConfigStream"
)

// CollectionConfigServiceClient is the client API for CollectionConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionConfigServiceClient interface {
	WaitForProbeConfig(ctx context.Context, opts ...grpc.CallOption) (CollectionConfigService_WaitForProbeConfigClient, error)
	GetConfigStream(ctx context.Context, in *GetConfigStreamRequest, opts ...grpc.CallOption) (CollectionConfigService_GetConfigStreamClient, error)
}

type collectionConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionConfigServiceClient(cc grpc.ClientConnInterface) CollectionConfigServiceClient {
	return &collectionConfigServiceClient{cc}
}

func (c *collectionConfigServiceClient) WaitForProbeConfig(ctx context.Context, opts ...grpc.CallOption) (CollectionConfigService_WaitForProbeConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &CollectionConfigService_ServiceDesc.Streams[0], CollectionConfigService_WaitForProbeConfig_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &collectionConfigServiceWaitForProbeConfigClient{stream}
	return x, nil
}

type CollectionConfigService_WaitForProbeConfigClient interface {
	Send(*WaitForProbeConfigResponse) error
	Recv() (*WaitForProbeConfigRequest, error)
	grpc.ClientStream
}

type collectionConfigServiceWaitForProbeConfigClient struct {
	grpc.ClientStream
}

func (x *collectionConfigServiceWaitForProbeConfigClient) Send(m *WaitForProbeConfigResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectionConfigServiceWaitForProbeConfigClient) Recv() (*WaitForProbeConfigRequest, error) {
	m := new(WaitForProbeConfigRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectionConfigServiceClient) GetConfigStream(ctx context.Context, in *GetConfigStreamRequest, opts ...grpc.CallOption) (CollectionConfigService_GetConfigStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CollectionConfigService_ServiceDesc.Streams[1], CollectionConfigService_GetConfigStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &collectionConfigServiceGetConfigStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CollectionConfigService_GetConfigStreamClient interface {
	Recv() (*GetConfigStreamResponse, error)
	grpc.ClientStream
}

type collectionConfigServiceGetConfigStreamClient struct {
	grpc.ClientStream
}

func (x *collectionConfigServiceGetConfigStreamClient) Recv() (*GetConfigStreamResponse, error) {
	m := new(GetConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectionConfigServiceServer is the server API for CollectionConfigService service.
// All implementations must embed UnimplementedCollectionConfigServiceServer
// for forward compatibility
type CollectionConfigServiceServer interface {
	WaitForProbeConfig(CollectionConfigService_WaitForProbeConfigServer) error
	GetConfigStream(*GetConfigStreamRequest, CollectionConfigService_GetConfigStreamServer) error
	mustEmbedUnimplementedCollectionConfigServiceServer()
}

// UnimplementedCollectionConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollectionConfigServiceServer struct {
}

func (UnimplementedCollectionConfigServiceServer) WaitForProbeConfig(CollectionConfigService_WaitForProbeConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitForProbeConfig not implemented")
}
func (UnimplementedCollectionConfigServiceServer) GetConfigStream(*GetConfigStreamRequest, CollectionConfigService_GetConfigStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConfigStream not implemented")
}
func (UnimplementedCollectionConfigServiceServer) mustEmbedUnimplementedCollectionConfigServiceServer() {
}

// UnsafeCollectionConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionConfigServiceServer will
// result in compilation errors.
type UnsafeCollectionConfigServiceServer interface {
	mustEmbedUnimplementedCollectionConfigServiceServer()
}

func RegisterCollectionConfigServiceServer(s grpc.ServiceRegistrar, srv CollectionConfigServiceServer) {
	s.RegisterService(&CollectionConfigService_ServiceDesc, srv)
}

func _CollectionConfigService_WaitForProbeConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectionConfigServiceServer).WaitForProbeConfig(&collectionConfigServiceWaitForProbeConfigServer{stream})
}

type CollectionConfigService_WaitForProbeConfigServer interface {
	Send(*WaitForProbeConfigRequest) error
	Recv() (*WaitForProbeConfigResponse, error)
	grpc.ServerStream
}

type collectionConfigServiceWaitForProbeConfigServer struct {
	grpc.ServerStream
}

func (x *collectionConfigServiceWaitForProbeConfigServer) Send(m *WaitForProbeConfigRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectionConfigServiceWaitForProbeConfigServer) Recv() (*WaitForProbeConfigResponse, error) {
	m := new(WaitForProbeConfigResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CollectionConfigService_GetConfigStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectionConfigServiceServer).GetConfigStream(m, &collectionConfigServiceGetConfigStreamServer{stream})
}

type CollectionConfigService_GetConfigStreamServer interface {
	Send(*GetConfigStreamResponse) error
	grpc.ServerStream
}

type collectionConfigServiceGetConfigStreamServer struct {
	grpc.ServerStream
}

func (x *collectionConfigServiceGetConfigStreamServer) Send(m *GetConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CollectionConfigService_ServiceDesc is the grpc.ServiceDesc for CollectionConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.collection_cfg.CollectionConfigService",
	HandlerType: (*CollectionConfigServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WaitForProbeConfig",
			Handler:       _CollectionConfigService_WaitForProbeConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetConfigStream",
			Handler:       _CollectionConfigService_GetConfigStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/cloud/collection_cfg.proto",
}
