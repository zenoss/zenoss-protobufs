// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: zenoss/cloud/collection_cfg.proto

package collection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tenant        string         `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Configuration *Configuration `protobuf:"bytes,4,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_zenoss_cloud_collection_cfg_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Config) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *Config) GetConfiguration() *Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_zenoss_cloud_collection_cfg_proto_rawDescGZIP(), []int{1}
}

func (x *Configuration) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Configuration) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ProbeSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProbeSuccess) Reset() {
	*x = ProbeSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeSuccess) ProtoMessage() {}

func (x *ProbeSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeSuccess.ProtoReflect.Descriptor instead.
func (*ProbeSuccess) Descriptor() ([]byte, []int) {
	return file_zenoss_cloud_collection_cfg_proto_rawDescGZIP(), []int{2}
}

type ProbeError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string        `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	FieldErrors []*FieldError `protobuf:"bytes,2,rep,name=field_errors,json=fieldErrors,proto3" json:"field_errors,omitempty"`
}

func (x *ProbeError) Reset() {
	*x = ProbeError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeError) ProtoMessage() {}

func (x *ProbeError) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeError.ProtoReflect.Descriptor instead.
func (*ProbeError) Descriptor() ([]byte, []int) {
	return file_zenoss_cloud_collection_cfg_proto_rawDescGZIP(), []int{3}
}

func (x *ProbeError) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProbeError) GetFieldErrors() []*FieldError {
	if x != nil {
		return x.FieldErrors
	}
	return nil
}

type FieldError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field       string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *FieldError) Reset() {
	*x = FieldError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldError) ProtoMessage() {}

func (x *FieldError) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldError.ProtoReflect.Descriptor instead.
func (*FieldError) Descriptor() ([]byte, []int) {
	return file_zenoss_cloud_collection_cfg_proto_rawDescGZIP(), []int{4}
}

func (x *FieldError) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FieldError) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ProbeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*ProbeResult_Success
	//	*ProbeResult_Error
	Result isProbeResult_Result `protobuf_oneof:"result"`
}

func (x *ProbeResult) Reset() {
	*x = ProbeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeResult) ProtoMessage() {}

func (x *ProbeResult) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeResult.ProtoReflect.Descriptor instead.
func (*ProbeResult) Descriptor() ([]byte, []int) {
	return file_zenoss_cloud_collection_cfg_proto_rawDescGZIP(), []int{5}
}

func (m *ProbeResult) GetResult() isProbeResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *ProbeResult) GetSuccess() *ProbeSuccess {
	if x, ok := x.GetResult().(*ProbeResult_Success); ok {
		return x.Success
	}
	return nil
}

func (x *ProbeResult) GetError() *ProbeError {
	if x, ok := x.GetResult().(*ProbeResult_Error); ok {
		return x.Error
	}
	return nil
}

type isProbeResult_Result interface {
	isProbeResult_Result()
}

type ProbeResult_Success struct {
	Success *ProbeSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type ProbeResult_Error struct {
	Error *ProbeError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ProbeResult_Success) isProbeResult_Result() {}

func (*ProbeResult_Error) isProbeResult_Result() {}

type WaitForProbeConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration *Config `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Deadline      int64   `protobuf:"varint,2,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *WaitForProbeConfigRequest) Reset() {
	*x = WaitForProbeConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForProbeConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForProbeConfigRequest) ProtoMessage() {}

func (x *WaitForProbeConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForProbeConfigRequest.ProtoReflect.Descriptor instead.
func (*WaitForProbeConfigRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_cloud_collection_cfg_proto_rawDescGZIP(), []int{6}
}

func (x *WaitForProbeConfigRequest) GetConfiguration() *Config {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *WaitForProbeConfigRequest) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

type WaitForProbeConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId string       `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Result   *ProbeResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *WaitForProbeConfigResponse) Reset() {
	*x = WaitForProbeConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForProbeConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForProbeConfigResponse) ProtoMessage() {}

func (x *WaitForProbeConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForProbeConfigResponse.ProtoReflect.Descriptor instead.
func (*WaitForProbeConfigResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_cloud_collection_cfg_proto_rawDescGZIP(), []int{7}
}

func (x *WaitForProbeConfigResponse) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *WaitForProbeConfigResponse) GetResult() *ProbeResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConfigStreamRequest) Reset() {
	*x = GetConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigStreamRequest) ProtoMessage() {}

func (x *GetConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*GetConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_cloud_collection_cfg_proto_rawDescGZIP(), []int{8}
}

type GetConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration []*Config `protobuf:"bytes,1,rep,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *GetConfigStreamResponse) Reset() {
	*x = GetConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigStreamResponse) ProtoMessage() {}

func (x *GetConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_cloud_collection_cfg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*GetConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_cloud_collection_cfg_proto_rawDescGZIP(), []int{9}
}

func (x *GetConfigStreamResponse) GetConfiguration() []*Config {
	if x != nil {
		return x.Configuration
	}
	return nil
}

var File_zenoss_cloud_collection_cfg_proto protoreflect.FileDescriptor

var file_zenoss_cloud_collection_cfg_proto_rawDesc = []byte{
	0x0a, 0x21, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x66, 0x67,
	0x22, 0x96, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x7a, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x44,
	0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x66, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x57, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x7b, 0x0a, 0x1a, 0x57,
	0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x66, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x64, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x66, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xaa, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x12, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x36, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x66, 0x67, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x33, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x66, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x66, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x57, 0x0a, 0x1b, 0x6f, 0x72, 0x67, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zenoss_cloud_collection_cfg_proto_rawDescOnce sync.Once
	file_zenoss_cloud_collection_cfg_proto_rawDescData = file_zenoss_cloud_collection_cfg_proto_rawDesc
)

func file_zenoss_cloud_collection_cfg_proto_rawDescGZIP() []byte {
	file_zenoss_cloud_collection_cfg_proto_rawDescOnce.Do(func() {
		file_zenoss_cloud_collection_cfg_proto_rawDescData = protoimpl.X.CompressGZIP(file_zenoss_cloud_collection_cfg_proto_rawDescData)
	})
	return file_zenoss_cloud_collection_cfg_proto_rawDescData
}

var file_zenoss_cloud_collection_cfg_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_zenoss_cloud_collection_cfg_proto_goTypes = []interface{}{
	(*Config)(nil),                     // 0: zenoss.cloud.collection_cfg.Config
	(*Configuration)(nil),              // 1: zenoss.cloud.collection_cfg.Configuration
	(*ProbeSuccess)(nil),               // 2: zenoss.cloud.collection_cfg.ProbeSuccess
	(*ProbeError)(nil),                 // 3: zenoss.cloud.collection_cfg.ProbeError
	(*FieldError)(nil),                 // 4: zenoss.cloud.collection_cfg.FieldError
	(*ProbeResult)(nil),                // 5: zenoss.cloud.collection_cfg.ProbeResult
	(*WaitForProbeConfigRequest)(nil),  // 6: zenoss.cloud.collection_cfg.WaitForProbeConfigRequest
	(*WaitForProbeConfigResponse)(nil), // 7: zenoss.cloud.collection_cfg.WaitForProbeConfigResponse
	(*GetConfigStreamRequest)(nil),     // 8: zenoss.cloud.collection_cfg.GetConfigStreamRequest
	(*GetConfigStreamResponse)(nil),    // 9: zenoss.cloud.collection_cfg.GetConfigStreamResponse
}
var file_zenoss_cloud_collection_cfg_proto_depIdxs = []int32{
	1, // 0: zenoss.cloud.collection_cfg.Config.configuration:type_name -> zenoss.cloud.collection_cfg.Configuration
	4, // 1: zenoss.cloud.collection_cfg.ProbeError.field_errors:type_name -> zenoss.cloud.collection_cfg.FieldError
	2, // 2: zenoss.cloud.collection_cfg.ProbeResult.success:type_name -> zenoss.cloud.collection_cfg.ProbeSuccess
	3, // 3: zenoss.cloud.collection_cfg.ProbeResult.error:type_name -> zenoss.cloud.collection_cfg.ProbeError
	0, // 4: zenoss.cloud.collection_cfg.WaitForProbeConfigRequest.configuration:type_name -> zenoss.cloud.collection_cfg.Config
	5, // 5: zenoss.cloud.collection_cfg.WaitForProbeConfigResponse.result:type_name -> zenoss.cloud.collection_cfg.ProbeResult
	0, // 6: zenoss.cloud.collection_cfg.GetConfigStreamResponse.configuration:type_name -> zenoss.cloud.collection_cfg.Config
	7, // 7: zenoss.cloud.collection_cfg.CollectionConfigService.WaitForProbeConfig:input_type -> zenoss.cloud.collection_cfg.WaitForProbeConfigResponse
	8, // 8: zenoss.cloud.collection_cfg.CollectionConfigService.GetConfigStream:input_type -> zenoss.cloud.collection_cfg.GetConfigStreamRequest
	6, // 9: zenoss.cloud.collection_cfg.CollectionConfigService.WaitForProbeConfig:output_type -> zenoss.cloud.collection_cfg.WaitForProbeConfigRequest
	9, // 10: zenoss.cloud.collection_cfg.CollectionConfigService.GetConfigStream:output_type -> zenoss.cloud.collection_cfg.GetConfigStreamResponse
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_zenoss_cloud_collection_cfg_proto_init() }
func file_zenoss_cloud_collection_cfg_proto_init() {
	if File_zenoss_cloud_collection_cfg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zenoss_cloud_collection_cfg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_cloud_collection_cfg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_cloud_collection_cfg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_cloud_collection_cfg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_cloud_collection_cfg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_cloud_collection_cfg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_cloud_collection_cfg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForProbeConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_cloud_collection_cfg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForProbeConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_cloud_collection_cfg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_cloud_collection_cfg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zenoss_cloud_collection_cfg_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ProbeResult_Success)(nil),
		(*ProbeResult_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zenoss_cloud_collection_cfg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zenoss_cloud_collection_cfg_proto_goTypes,
		DependencyIndexes: file_zenoss_cloud_collection_cfg_proto_depIdxs,
		MessageInfos:      file_zenoss_cloud_collection_cfg_proto_msgTypes,
	}.Build()
	File_zenoss_cloud_collection_cfg_proto = out.File
	file_zenoss_cloud_collection_cfg_proto_rawDesc = nil
	file_zenoss_cloud_collection_cfg_proto_goTypes = nil
	file_zenoss_cloud_collection_cfg_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CollectionConfigServiceClient is the client API for CollectionConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollectionConfigServiceClient interface {
	WaitForProbeConfig(ctx context.Context, opts ...grpc.CallOption) (CollectionConfigService_WaitForProbeConfigClient, error)
	GetConfigStream(ctx context.Context, in *GetConfigStreamRequest, opts ...grpc.CallOption) (CollectionConfigService_GetConfigStreamClient, error)
}

type collectionConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionConfigServiceClient(cc grpc.ClientConnInterface) CollectionConfigServiceClient {
	return &collectionConfigServiceClient{cc}
}

func (c *collectionConfigServiceClient) WaitForProbeConfig(ctx context.Context, opts ...grpc.CallOption) (CollectionConfigService_WaitForProbeConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CollectionConfigService_serviceDesc.Streams[0], "/zenoss.cloud.collection_cfg.CollectionConfigService/WaitForProbeConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectionConfigServiceWaitForProbeConfigClient{stream}
	return x, nil
}

type CollectionConfigService_WaitForProbeConfigClient interface {
	Send(*WaitForProbeConfigResponse) error
	Recv() (*WaitForProbeConfigRequest, error)
	grpc.ClientStream
}

type collectionConfigServiceWaitForProbeConfigClient struct {
	grpc.ClientStream
}

func (x *collectionConfigServiceWaitForProbeConfigClient) Send(m *WaitForProbeConfigResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectionConfigServiceWaitForProbeConfigClient) Recv() (*WaitForProbeConfigRequest, error) {
	m := new(WaitForProbeConfigRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectionConfigServiceClient) GetConfigStream(ctx context.Context, in *GetConfigStreamRequest, opts ...grpc.CallOption) (CollectionConfigService_GetConfigStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CollectionConfigService_serviceDesc.Streams[1], "/zenoss.cloud.collection_cfg.CollectionConfigService/GetConfigStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectionConfigServiceGetConfigStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CollectionConfigService_GetConfigStreamClient interface {
	Recv() (*GetConfigStreamResponse, error)
	grpc.ClientStream
}

type collectionConfigServiceGetConfigStreamClient struct {
	grpc.ClientStream
}

func (x *collectionConfigServiceGetConfigStreamClient) Recv() (*GetConfigStreamResponse, error) {
	m := new(GetConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectionConfigServiceServer is the server API for CollectionConfigService service.
type CollectionConfigServiceServer interface {
	WaitForProbeConfig(CollectionConfigService_WaitForProbeConfigServer) error
	GetConfigStream(*GetConfigStreamRequest, CollectionConfigService_GetConfigStreamServer) error
}

// UnimplementedCollectionConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCollectionConfigServiceServer struct {
}

func (*UnimplementedCollectionConfigServiceServer) WaitForProbeConfig(CollectionConfigService_WaitForProbeConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitForProbeConfig not implemented")
}
func (*UnimplementedCollectionConfigServiceServer) GetConfigStream(*GetConfigStreamRequest, CollectionConfigService_GetConfigStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConfigStream not implemented")
}

func RegisterCollectionConfigServiceServer(s *grpc.Server, srv CollectionConfigServiceServer) {
	s.RegisterService(&_CollectionConfigService_serviceDesc, srv)
}

func _CollectionConfigService_WaitForProbeConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectionConfigServiceServer).WaitForProbeConfig(&collectionConfigServiceWaitForProbeConfigServer{stream})
}

type CollectionConfigService_WaitForProbeConfigServer interface {
	Send(*WaitForProbeConfigRequest) error
	Recv() (*WaitForProbeConfigResponse, error)
	grpc.ServerStream
}

type collectionConfigServiceWaitForProbeConfigServer struct {
	grpc.ServerStream
}

func (x *collectionConfigServiceWaitForProbeConfigServer) Send(m *WaitForProbeConfigRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectionConfigServiceWaitForProbeConfigServer) Recv() (*WaitForProbeConfigResponse, error) {
	m := new(WaitForProbeConfigResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CollectionConfigService_GetConfigStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectionConfigServiceServer).GetConfigStream(m, &collectionConfigServiceGetConfigStreamServer{stream})
}

type CollectionConfigService_GetConfigStreamServer interface {
	Send(*GetConfigStreamResponse) error
	grpc.ServerStream
}

type collectionConfigServiceGetConfigStreamServer struct {
	grpc.ServerStream
}

func (x *collectionConfigServiceGetConfigStreamServer) Send(m *GetConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CollectionConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.collection_cfg.CollectionConfigService",
	HandlerType: (*CollectionConfigServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WaitForProbeConfig",
			Handler:       _CollectionConfigService_WaitForProbeConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetConfigStream",
			Handler:       _CollectionConfigService_GetConfigStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/cloud/collection_cfg.proto",
}
