// Code generated by mockery v2.12.2. DO NOT EDIT.

package collection

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockCollectionConfigServiceClient is an autogenerated mock type for the CollectionConfigServiceClient type
type MockCollectionConfigServiceClient struct {
	mock.Mock
}

type MockCollectionConfigServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollectionConfigServiceClient) EXPECT() *MockCollectionConfigServiceClient_Expecter {
	return &MockCollectionConfigServiceClient_Expecter{mock: &_m.Mock}
}

// GetConfigStream provides a mock function with given fields: ctx, in, opts
func (_m *MockCollectionConfigServiceClient) GetConfigStream(ctx context.Context, in *GetConfigStreamRequest, opts ...grpc.CallOption) (CollectionConfigService_GetConfigStreamClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 CollectionConfigService_GetConfigStreamClient
	if rf, ok := ret.Get(0).(func(context.Context, *GetConfigStreamRequest, ...grpc.CallOption) CollectionConfigService_GetConfigStreamClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CollectionConfigService_GetConfigStreamClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetConfigStreamRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollectionConfigServiceClient_GetConfigStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigStream'
type MockCollectionConfigServiceClient_GetConfigStream_Call struct {
	*mock.Call
}

// GetConfigStream is a helper method to define mock.On call
//  - ctx context.Context
//  - in *GetConfigStreamRequest
//  - opts ...grpc.CallOption
func (_e *MockCollectionConfigServiceClient_Expecter) GetConfigStream(ctx interface{}, in interface{}, opts ...interface{}) *MockCollectionConfigServiceClient_GetConfigStream_Call {
	return &MockCollectionConfigServiceClient_GetConfigStream_Call{Call: _e.mock.On("GetConfigStream",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCollectionConfigServiceClient_GetConfigStream_Call) Run(run func(ctx context.Context, in *GetConfigStreamRequest, opts ...grpc.CallOption)) *MockCollectionConfigServiceClient_GetConfigStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetConfigStreamRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCollectionConfigServiceClient_GetConfigStream_Call) Return(_a0 CollectionConfigService_GetConfigStreamClient, _a1 error) *MockCollectionConfigServiceClient_GetConfigStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// WaitForProbeConfig provides a mock function with given fields: ctx, opts
func (_m *MockCollectionConfigServiceClient) WaitForProbeConfig(ctx context.Context, opts ...grpc.CallOption) (CollectionConfigService_WaitForProbeConfigClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 CollectionConfigService_WaitForProbeConfigClient
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) CollectionConfigService_WaitForProbeConfigClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CollectionConfigService_WaitForProbeConfigClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollectionConfigServiceClient_WaitForProbeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForProbeConfig'
type MockCollectionConfigServiceClient_WaitForProbeConfig_Call struct {
	*mock.Call
}

// WaitForProbeConfig is a helper method to define mock.On call
//  - ctx context.Context
//  - opts ...grpc.CallOption
func (_e *MockCollectionConfigServiceClient_Expecter) WaitForProbeConfig(ctx interface{}, opts ...interface{}) *MockCollectionConfigServiceClient_WaitForProbeConfig_Call {
	return &MockCollectionConfigServiceClient_WaitForProbeConfig_Call{Call: _e.mock.On("WaitForProbeConfig",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockCollectionConfigServiceClient_WaitForProbeConfig_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockCollectionConfigServiceClient_WaitForProbeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockCollectionConfigServiceClient_WaitForProbeConfig_Call) Return(_a0 CollectionConfigService_WaitForProbeConfigClient, _a1 error) *MockCollectionConfigServiceClient_WaitForProbeConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewMockCollectionConfigServiceClient creates a new instance of MockCollectionConfigServiceClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCollectionConfigServiceClient(t testing.TB) *MockCollectionConfigServiceClient {
	mock := &MockCollectionConfigServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
