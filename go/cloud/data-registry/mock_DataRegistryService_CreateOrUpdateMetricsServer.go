// Code generated by mockery v1.0.0. DO NOT EDIT.

package data_registry

import context "context"
import metadata "google.golang.org/grpc/metadata"
import mock "github.com/stretchr/testify/mock"

// MockDataRegistryService_CreateOrUpdateMetricsServer is an autogenerated mock type for the DataRegistryService_CreateOrUpdateMetricsServer type
type MockDataRegistryService_CreateOrUpdateMetricsServer struct {
	mock.Mock
}

// Context provides a mock function with given fields:
func (_m *MockDataRegistryService_CreateOrUpdateMetricsServer) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Recv provides a mock function with given fields:
func (_m *MockDataRegistryService_CreateOrUpdateMetricsServer) Recv() (*RegisterMetricRequest, error) {
	ret := _m.Called()

	var r0 *RegisterMetricRequest
	if rf, ok := ret.Get(0).(func() *RegisterMetricRequest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterMetricRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecvMsg provides a mock function with given fields: m
func (_m *MockDataRegistryService_CreateOrUpdateMetricsServer) RecvMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendAndClose provides a mock function with given fields: _a0
func (_m *MockDataRegistryService_CreateOrUpdateMetricsServer) SendAndClose(_a0 *RegisterMetricsResponse) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*RegisterMetricsResponse) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendHeader provides a mock function with given fields: _a0
func (_m *MockDataRegistryService_CreateOrUpdateMetricsServer) SendHeader(_a0 metadata.MD) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMsg provides a mock function with given fields: m
func (_m *MockDataRegistryService_CreateOrUpdateMetricsServer) SendMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetHeader provides a mock function with given fields: _a0
func (_m *MockDataRegistryService_CreateOrUpdateMetricsServer) SetHeader(_a0 metadata.MD) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTrailer provides a mock function with given fields: _a0
func (_m *MockDataRegistryService_CreateOrUpdateMetricsServer) SetTrailer(_a0 metadata.MD) {
	_m.Called(_a0)
}
