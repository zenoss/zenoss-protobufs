// Code generated by mockery v1.0.0. DO NOT EDIT.

package data_registry

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDataRegistryServiceServer is an autogenerated mock type for the DataRegistryServiceServer type
type MockDataRegistryServiceServer struct {
	mock.Mock
}

// CreateOrUpdateMetric provides a mock function with given fields: _a0, _a1
func (_m *MockDataRegistryServiceServer) CreateOrUpdateMetric(_a0 context.Context, _a1 *RegisterMetricRequest) (*RegisterMetricResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *RegisterMetricResponse
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterMetricRequest) *RegisterMetricResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterMetricResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *RegisterMetricRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdateMetrics provides a mock function with given fields: _a0
func (_m *MockDataRegistryServiceServer) CreateOrUpdateMetrics(_a0 DataRegistryService_CreateOrUpdateMetricsServer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(DataRegistryService_CreateOrUpdateMetricsServer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMetric provides a mock function with given fields: _a0, _a1
func (_m *MockDataRegistryServiceServer) GetMetric(_a0 context.Context, _a1 *GetMetricRequest) (*GetMetricResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetMetricResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetMetricRequest) *GetMetricResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetMetricResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetMetricRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterDefinition provides a mock function with given fields: _a0, _a1
func (_m *MockDataRegistryServiceServer) RegisterDefinition(_a0 context.Context, _a1 *Definition) (*DefinitionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DefinitionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *Definition) *DefinitionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DefinitionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Definition) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDefinition provides a mock function with given fields: _a0, _a1
func (_m *MockDataRegistryServiceServer) UpdateDefinition(_a0 context.Context, _a1 *DefinitionUpdate) (*DefinitionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DefinitionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DefinitionUpdate) *DefinitionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DefinitionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DefinitionUpdate) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMetric provides a mock function with given fields: _a0, _a1
func (_m *MockDataRegistryServiceServer) UpdateMetric(_a0 context.Context, _a1 *UpdateMetricRequest) (*RegisterMetricResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *RegisterMetricResponse
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateMetricRequest) *RegisterMetricResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterMetricResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *UpdateMetricRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
