// Code generated by mockery v2.12.2. DO NOT EDIT.

package data_registry

import (
	context "context"
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// MockDataRegistryServiceServer is an autogenerated mock type for the DataRegistryServiceServer type
type MockDataRegistryServiceServer struct {
	mock.Mock
}

type MockDataRegistryServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataRegistryServiceServer) EXPECT() *MockDataRegistryServiceServer_Expecter {
	return &MockDataRegistryServiceServer_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateMetric provides a mock function with given fields: _a0, _a1
func (_m *MockDataRegistryServiceServer) CreateOrUpdateMetric(_a0 context.Context, _a1 *RegisterMetricRequest) (*RegisterMetricResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *RegisterMetricResponse
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterMetricRequest) *RegisterMetricResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterMetricResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *RegisterMetricRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataRegistryServiceServer_CreateOrUpdateMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateMetric'
type MockDataRegistryServiceServer_CreateOrUpdateMetric_Call struct {
	*mock.Call
}

// CreateOrUpdateMetric is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *RegisterMetricRequest
func (_e *MockDataRegistryServiceServer_Expecter) CreateOrUpdateMetric(_a0 interface{}, _a1 interface{}) *MockDataRegistryServiceServer_CreateOrUpdateMetric_Call {
	return &MockDataRegistryServiceServer_CreateOrUpdateMetric_Call{Call: _e.mock.On("CreateOrUpdateMetric", _a0, _a1)}
}

func (_c *MockDataRegistryServiceServer_CreateOrUpdateMetric_Call) Run(run func(_a0 context.Context, _a1 *RegisterMetricRequest)) *MockDataRegistryServiceServer_CreateOrUpdateMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*RegisterMetricRequest))
	})
	return _c
}

func (_c *MockDataRegistryServiceServer_CreateOrUpdateMetric_Call) Return(_a0 *RegisterMetricResponse, _a1 error) *MockDataRegistryServiceServer_CreateOrUpdateMetric_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateOrUpdateMetrics provides a mock function with given fields: _a0
func (_m *MockDataRegistryServiceServer) CreateOrUpdateMetrics(_a0 DataRegistryService_CreateOrUpdateMetricsServer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(DataRegistryService_CreateOrUpdateMetricsServer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataRegistryServiceServer_CreateOrUpdateMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateMetrics'
type MockDataRegistryServiceServer_CreateOrUpdateMetrics_Call struct {
	*mock.Call
}

// CreateOrUpdateMetrics is a helper method to define mock.On call
//  - _a0 DataRegistryService_CreateOrUpdateMetricsServer
func (_e *MockDataRegistryServiceServer_Expecter) CreateOrUpdateMetrics(_a0 interface{}) *MockDataRegistryServiceServer_CreateOrUpdateMetrics_Call {
	return &MockDataRegistryServiceServer_CreateOrUpdateMetrics_Call{Call: _e.mock.On("CreateOrUpdateMetrics", _a0)}
}

func (_c *MockDataRegistryServiceServer_CreateOrUpdateMetrics_Call) Run(run func(_a0 DataRegistryService_CreateOrUpdateMetricsServer)) *MockDataRegistryServiceServer_CreateOrUpdateMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DataRegistryService_CreateOrUpdateMetricsServer))
	})
	return _c
}

func (_c *MockDataRegistryServiceServer_CreateOrUpdateMetrics_Call) Return(_a0 error) *MockDataRegistryServiceServer_CreateOrUpdateMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetMetric provides a mock function with given fields: _a0, _a1
func (_m *MockDataRegistryServiceServer) GetMetric(_a0 context.Context, _a1 *GetMetricRequest) (*GetMetricResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetMetricResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetMetricRequest) *GetMetricResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetMetricResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetMetricRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataRegistryServiceServer_GetMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetric'
type MockDataRegistryServiceServer_GetMetric_Call struct {
	*mock.Call
}

// GetMetric is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *GetMetricRequest
func (_e *MockDataRegistryServiceServer_Expecter) GetMetric(_a0 interface{}, _a1 interface{}) *MockDataRegistryServiceServer_GetMetric_Call {
	return &MockDataRegistryServiceServer_GetMetric_Call{Call: _e.mock.On("GetMetric", _a0, _a1)}
}

func (_c *MockDataRegistryServiceServer_GetMetric_Call) Run(run func(_a0 context.Context, _a1 *GetMetricRequest)) *MockDataRegistryServiceServer_GetMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetMetricRequest))
	})
	return _c
}

func (_c *MockDataRegistryServiceServer_GetMetric_Call) Return(_a0 *GetMetricResponse, _a1 error) *MockDataRegistryServiceServer_GetMetric_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterDefinition provides a mock function with given fields: _a0, _a1
func (_m *MockDataRegistryServiceServer) RegisterDefinition(_a0 context.Context, _a1 *Definition) (*DefinitionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DefinitionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *Definition) *DefinitionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DefinitionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Definition) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataRegistryServiceServer_RegisterDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterDefinition'
type MockDataRegistryServiceServer_RegisterDefinition_Call struct {
	*mock.Call
}

// RegisterDefinition is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *Definition
func (_e *MockDataRegistryServiceServer_Expecter) RegisterDefinition(_a0 interface{}, _a1 interface{}) *MockDataRegistryServiceServer_RegisterDefinition_Call {
	return &MockDataRegistryServiceServer_RegisterDefinition_Call{Call: _e.mock.On("RegisterDefinition", _a0, _a1)}
}

func (_c *MockDataRegistryServiceServer_RegisterDefinition_Call) Run(run func(_a0 context.Context, _a1 *Definition)) *MockDataRegistryServiceServer_RegisterDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Definition))
	})
	return _c
}

func (_c *MockDataRegistryServiceServer_RegisterDefinition_Call) Return(_a0 *DefinitionResponse, _a1 error) *MockDataRegistryServiceServer_RegisterDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateDefinition provides a mock function with given fields: _a0, _a1
func (_m *MockDataRegistryServiceServer) UpdateDefinition(_a0 context.Context, _a1 *DefinitionUpdate) (*DefinitionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DefinitionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DefinitionUpdate) *DefinitionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DefinitionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DefinitionUpdate) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataRegistryServiceServer_UpdateDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDefinition'
type MockDataRegistryServiceServer_UpdateDefinition_Call struct {
	*mock.Call
}

// UpdateDefinition is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *DefinitionUpdate
func (_e *MockDataRegistryServiceServer_Expecter) UpdateDefinition(_a0 interface{}, _a1 interface{}) *MockDataRegistryServiceServer_UpdateDefinition_Call {
	return &MockDataRegistryServiceServer_UpdateDefinition_Call{Call: _e.mock.On("UpdateDefinition", _a0, _a1)}
}

func (_c *MockDataRegistryServiceServer_UpdateDefinition_Call) Run(run func(_a0 context.Context, _a1 *DefinitionUpdate)) *MockDataRegistryServiceServer_UpdateDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DefinitionUpdate))
	})
	return _c
}

func (_c *MockDataRegistryServiceServer_UpdateDefinition_Call) Return(_a0 *DefinitionResponse, _a1 error) *MockDataRegistryServiceServer_UpdateDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateMetric provides a mock function with given fields: _a0, _a1
func (_m *MockDataRegistryServiceServer) UpdateMetric(_a0 context.Context, _a1 *UpdateMetricRequest) (*RegisterMetricResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *RegisterMetricResponse
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateMetricRequest) *RegisterMetricResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterMetricResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *UpdateMetricRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataRegistryServiceServer_UpdateMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMetric'
type MockDataRegistryServiceServer_UpdateMetric_Call struct {
	*mock.Call
}

// UpdateMetric is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *UpdateMetricRequest
func (_e *MockDataRegistryServiceServer_Expecter) UpdateMetric(_a0 interface{}, _a1 interface{}) *MockDataRegistryServiceServer_UpdateMetric_Call {
	return &MockDataRegistryServiceServer_UpdateMetric_Call{Call: _e.mock.On("UpdateMetric", _a0, _a1)}
}

func (_c *MockDataRegistryServiceServer_UpdateMetric_Call) Run(run func(_a0 context.Context, _a1 *UpdateMetricRequest)) *MockDataRegistryServiceServer_UpdateMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*UpdateMetricRequest))
	})
	return _c
}

func (_c *MockDataRegistryServiceServer_UpdateMetric_Call) Return(_a0 *RegisterMetricResponse, _a1 error) *MockDataRegistryServiceServer_UpdateMetric_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewMockDataRegistryServiceServer creates a new instance of MockDataRegistryServiceServer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDataRegistryServiceServer(t testing.TB) *MockDataRegistryServiceServer {
	mock := &MockDataRegistryServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
