// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zenoss/cloud/data_registry.proto

package data_registry

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	data_receiver "github.com/zenoss/zenoss-protobufs/go/cloud/data_receiver"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UpdateMode int32

const (
	UpdateMode_MERGE      UpdateMode = 0
	UpdateMode_REPLACE    UpdateMode = 1
	UpdateMode_REPLACEALL UpdateMode = 2
)

var UpdateMode_name = map[int32]string{
	0: "MERGE",
	1: "REPLACE",
	2: "REPLACEALL",
}

var UpdateMode_value = map[string]int32{
	"MERGE":      0,
	"REPLACE":    1,
	"REPLACEALL": 2,
}

func (x UpdateMode) String() string {
	return proto.EnumName(UpdateMode_name, int32(x))
}

func (UpdateMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_37facc31fb3006aa, []int{0}
}

type Definition struct {
	// The metric name
	Metric string `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	// Dimensions associated with this datapoint.
	Dimensions []string `protobuf:"bytes,2,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Metadata for the datapoint. Note: using Struct as it is easier than AnyArray when using json representations
	MetadataFields *_struct.Struct `protobuf:"bytes,3,opt,name=metadataFields,proto3" json:"metadataFields,omitempty"`
	// Determines what happens to the existing definition metadata fields.  If MERGE (default), the provided metadata
	// is merged with the existing metadata.  If REPLACE, the provided metadata replaces the metadata on the existing
	// definition.
	UpdateMode           UpdateMode `protobuf:"varint,4,opt,name=update_mode,json=updateMode,proto3,enum=zenoss.cloud.UpdateMode" json:"update_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Definition) Reset()         { *m = Definition{} }
func (m *Definition) String() string { return proto.CompactTextString(m) }
func (*Definition) ProtoMessage()    {}
func (*Definition) Descriptor() ([]byte, []int) {
	return fileDescriptor_37facc31fb3006aa, []int{0}
}

func (m *Definition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Definition.Unmarshal(m, b)
}
func (m *Definition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Definition.Marshal(b, m, deterministic)
}
func (m *Definition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Definition.Merge(m, src)
}
func (m *Definition) XXX_Size() int {
	return xxx_messageInfo_Definition.Size(m)
}
func (m *Definition) XXX_DiscardUnknown() {
	xxx_messageInfo_Definition.DiscardUnknown(m)
}

var xxx_messageInfo_Definition proto.InternalMessageInfo

func (m *Definition) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *Definition) GetDimensions() []string {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Definition) GetMetadataFields() *_struct.Struct {
	if m != nil {
		return m.MetadataFields
	}
	return nil
}

func (m *Definition) GetUpdateMode() UpdateMode {
	if m != nil {
		return m.UpdateMode
	}
	return UpdateMode_MERGE
}

type DefinitionUpdate struct {
	// The metric name
	DefinitionId string `protobuf:"bytes,1,opt,name=definition_id,json=definitionId,proto3" json:"definition_id,omitempty"`
	// Metadata for the datapoint. Note: using Struct as it is easier than AnyArray when using json representations
	MetadataFields *_struct.Struct `protobuf:"bytes,2,opt,name=metadataFields,proto3" json:"metadataFields,omitempty"`
	// Determines what happens to the existing definition metadata fields.  If MERGE (default), the provided metadata
	// is merged with the existing metadata.  If REPLACE, the provided metadata replaces the metadata on the existing
	// definition.
	UpdateMode           UpdateMode `protobuf:"varint,3,opt,name=update_mode,json=updateMode,proto3,enum=zenoss.cloud.UpdateMode" json:"update_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DefinitionUpdate) Reset()         { *m = DefinitionUpdate{} }
func (m *DefinitionUpdate) String() string { return proto.CompactTextString(m) }
func (*DefinitionUpdate) ProtoMessage()    {}
func (*DefinitionUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_37facc31fb3006aa, []int{1}
}

func (m *DefinitionUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DefinitionUpdate.Unmarshal(m, b)
}
func (m *DefinitionUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DefinitionUpdate.Marshal(b, m, deterministic)
}
func (m *DefinitionUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefinitionUpdate.Merge(m, src)
}
func (m *DefinitionUpdate) XXX_Size() int {
	return xxx_messageInfo_DefinitionUpdate.Size(m)
}
func (m *DefinitionUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_DefinitionUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_DefinitionUpdate proto.InternalMessageInfo

func (m *DefinitionUpdate) GetDefinitionId() string {
	if m != nil {
		return m.DefinitionId
	}
	return ""
}

func (m *DefinitionUpdate) GetMetadataFields() *_struct.Struct {
	if m != nil {
		return m.MetadataFields
	}
	return nil
}

func (m *DefinitionUpdate) GetUpdateMode() UpdateMode {
	if m != nil {
		return m.UpdateMode
	}
	return UpdateMode_MERGE
}

type RegisterMetricRequest struct {
	Metric               *data_receiver.MetricWrapper `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	UpdateMode           UpdateMode                   `protobuf:"varint,2,opt,name=update_mode,json=updateMode,proto3,enum=zenoss.cloud.UpdateMode" json:"update_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *RegisterMetricRequest) Reset()         { *m = RegisterMetricRequest{} }
func (m *RegisterMetricRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterMetricRequest) ProtoMessage()    {}
func (*RegisterMetricRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37facc31fb3006aa, []int{2}
}

func (m *RegisterMetricRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterMetricRequest.Unmarshal(m, b)
}
func (m *RegisterMetricRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterMetricRequest.Marshal(b, m, deterministic)
}
func (m *RegisterMetricRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMetricRequest.Merge(m, src)
}
func (m *RegisterMetricRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterMetricRequest.Size(m)
}
func (m *RegisterMetricRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMetricRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMetricRequest proto.InternalMessageInfo

func (m *RegisterMetricRequest) GetMetric() *data_receiver.MetricWrapper {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (m *RegisterMetricRequest) GetUpdateMode() UpdateMode {
	if m != nil {
		return m.UpdateMode
	}
	return UpdateMode_MERGE
}

type UpdateMetricRequest struct {
	InstanceId string `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	// Metadata for the datapoint
	MetadataFields       *_struct.Struct `protobuf:"bytes,2,opt,name=metadataFields,proto3" json:"metadataFields,omitempty"`
	UpdateMode           UpdateMode      `protobuf:"varint,3,opt,name=update_mode,json=updateMode,proto3,enum=zenoss.cloud.UpdateMode" json:"update_mode,omitempty"`
	Timestamp            int64           `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateMetricRequest) Reset()         { *m = UpdateMetricRequest{} }
func (m *UpdateMetricRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMetricRequest) ProtoMessage()    {}
func (*UpdateMetricRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37facc31fb3006aa, []int{3}
}

func (m *UpdateMetricRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMetricRequest.Unmarshal(m, b)
}
func (m *UpdateMetricRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMetricRequest.Marshal(b, m, deterministic)
}
func (m *UpdateMetricRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMetricRequest.Merge(m, src)
}
func (m *UpdateMetricRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateMetricRequest.Size(m)
}
func (m *UpdateMetricRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMetricRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMetricRequest proto.InternalMessageInfo

func (m *UpdateMetricRequest) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *UpdateMetricRequest) GetMetadataFields() *_struct.Struct {
	if m != nil {
		return m.MetadataFields
	}
	return nil
}

func (m *UpdateMetricRequest) GetUpdateMode() UpdateMode {
	if m != nil {
		return m.UpdateMode
	}
	return UpdateMode_MERGE
}

func (m *UpdateMetricRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type RegisterMetricResponse struct {
	InstanceId           string   `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	DefinitionId         string   `protobuf:"bytes,2,opt,name=definitionId,proto3" json:"definitionId,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterMetricResponse) Reset()         { *m = RegisterMetricResponse{} }
func (m *RegisterMetricResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterMetricResponse) ProtoMessage()    {}
func (*RegisterMetricResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37facc31fb3006aa, []int{4}
}

func (m *RegisterMetricResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterMetricResponse.Unmarshal(m, b)
}
func (m *RegisterMetricResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterMetricResponse.Marshal(b, m, deterministic)
}
func (m *RegisterMetricResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMetricResponse.Merge(m, src)
}
func (m *RegisterMetricResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterMetricResponse.Size(m)
}
func (m *RegisterMetricResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMetricResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMetricResponse proto.InternalMessageInfo

func (m *RegisterMetricResponse) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *RegisterMetricResponse) GetDefinitionId() string {
	if m != nil {
		return m.DefinitionId
	}
	return ""
}

func (m *RegisterMetricResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RegisterMetricVerboseResponse struct {
	Response             *RegisterMetricResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Error                string                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RegisterMetricVerboseResponse) Reset()         { *m = RegisterMetricVerboseResponse{} }
func (m *RegisterMetricVerboseResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterMetricVerboseResponse) ProtoMessage()    {}
func (*RegisterMetricVerboseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37facc31fb3006aa, []int{5}
}

func (m *RegisterMetricVerboseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterMetricVerboseResponse.Unmarshal(m, b)
}
func (m *RegisterMetricVerboseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterMetricVerboseResponse.Marshal(b, m, deterministic)
}
func (m *RegisterMetricVerboseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMetricVerboseResponse.Merge(m, src)
}
func (m *RegisterMetricVerboseResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterMetricVerboseResponse.Size(m)
}
func (m *RegisterMetricVerboseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMetricVerboseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMetricVerboseResponse proto.InternalMessageInfo

func (m *RegisterMetricVerboseResponse) GetResponse() *RegisterMetricResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RegisterMetricVerboseResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RegisterMetricsResponse struct {
	Responses            []*RegisterMetricVerboseResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *RegisterMetricsResponse) Reset()         { *m = RegisterMetricsResponse{} }
func (m *RegisterMetricsResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterMetricsResponse) ProtoMessage()    {}
func (*RegisterMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37facc31fb3006aa, []int{6}
}

func (m *RegisterMetricsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterMetricsResponse.Unmarshal(m, b)
}
func (m *RegisterMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterMetricsResponse.Marshal(b, m, deterministic)
}
func (m *RegisterMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterMetricsResponse.Merge(m, src)
}
func (m *RegisterMetricsResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterMetricsResponse.Size(m)
}
func (m *RegisterMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterMetricsResponse proto.InternalMessageInfo

func (m *RegisterMetricsResponse) GetResponses() []*RegisterMetricVerboseResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type DefinitionResponse struct {
	DefinitionId         string   `protobuf:"bytes,1,opt,name=definitionId,proto3" json:"definitionId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DefinitionResponse) Reset()         { *m = DefinitionResponse{} }
func (m *DefinitionResponse) String() string { return proto.CompactTextString(m) }
func (*DefinitionResponse) ProtoMessage()    {}
func (*DefinitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37facc31fb3006aa, []int{7}
}

func (m *DefinitionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DefinitionResponse.Unmarshal(m, b)
}
func (m *DefinitionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DefinitionResponse.Marshal(b, m, deterministic)
}
func (m *DefinitionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefinitionResponse.Merge(m, src)
}
func (m *DefinitionResponse) XXX_Size() int {
	return xxx_messageInfo_DefinitionResponse.Size(m)
}
func (m *DefinitionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DefinitionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DefinitionResponse proto.InternalMessageInfo

func (m *DefinitionResponse) GetDefinitionId() string {
	if m != nil {
		return m.DefinitionId
	}
	return ""
}

type GetMetricRequest struct {
	InstanceId           string   `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMetricRequest) Reset()         { *m = GetMetricRequest{} }
func (m *GetMetricRequest) String() string { return proto.CompactTextString(m) }
func (*GetMetricRequest) ProtoMessage()    {}
func (*GetMetricRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37facc31fb3006aa, []int{8}
}

func (m *GetMetricRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMetricRequest.Unmarshal(m, b)
}
func (m *GetMetricRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMetricRequest.Marshal(b, m, deterministic)
}
func (m *GetMetricRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetricRequest.Merge(m, src)
}
func (m *GetMetricRequest) XXX_Size() int {
	return xxx_messageInfo_GetMetricRequest.Size(m)
}
func (m *GetMetricRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetricRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetricRequest proto.InternalMessageInfo

func (m *GetMetricRequest) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

type GetMetricResponse struct {
	Metric               *data_receiver.Metric `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetMetricResponse) Reset()         { *m = GetMetricResponse{} }
func (m *GetMetricResponse) String() string { return proto.CompactTextString(m) }
func (*GetMetricResponse) ProtoMessage()    {}
func (*GetMetricResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37facc31fb3006aa, []int{9}
}

func (m *GetMetricResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMetricResponse.Unmarshal(m, b)
}
func (m *GetMetricResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMetricResponse.Marshal(b, m, deterministic)
}
func (m *GetMetricResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetricResponse.Merge(m, src)
}
func (m *GetMetricResponse) XXX_Size() int {
	return xxx_messageInfo_GetMetricResponse.Size(m)
}
func (m *GetMetricResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetricResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetricResponse proto.InternalMessageInfo

func (m *GetMetricResponse) GetMetric() *data_receiver.Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func init() {
	proto.RegisterEnum("zenoss.cloud.UpdateMode", UpdateMode_name, UpdateMode_value)
	proto.RegisterType((*Definition)(nil), "zenoss.cloud.Definition")
	proto.RegisterType((*DefinitionUpdate)(nil), "zenoss.cloud.DefinitionUpdate")
	proto.RegisterType((*RegisterMetricRequest)(nil), "zenoss.cloud.RegisterMetricRequest")
	proto.RegisterType((*UpdateMetricRequest)(nil), "zenoss.cloud.UpdateMetricRequest")
	proto.RegisterType((*RegisterMetricResponse)(nil), "zenoss.cloud.RegisterMetricResponse")
	proto.RegisterType((*RegisterMetricVerboseResponse)(nil), "zenoss.cloud.RegisterMetricVerboseResponse")
	proto.RegisterType((*RegisterMetricsResponse)(nil), "zenoss.cloud.RegisterMetricsResponse")
	proto.RegisterType((*DefinitionResponse)(nil), "zenoss.cloud.DefinitionResponse")
	proto.RegisterType((*GetMetricRequest)(nil), "zenoss.cloud.GetMetricRequest")
	proto.RegisterType((*GetMetricResponse)(nil), "zenoss.cloud.GetMetricResponse")
}

func init() { proto.RegisterFile("zenoss/cloud/data_registry.proto", fileDescriptor_37facc31fb3006aa) }

var fileDescriptor_37facc31fb3006aa = []byte{
	// 682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xdf, 0x4e, 0xd4, 0x4e,
	0x14, 0xa6, 0xbb, 0xc0, 0xef, 0xb7, 0x67, 0x91, 0xac, 0xc3, 0xbf, 0xcd, 0x0a, 0x58, 0x8b, 0x26,
	0x1b, 0x95, 0x6e, 0xb2, 0x78, 0x21, 0x57, 0x8a, 0xb0, 0x12, 0x12, 0x50, 0x32, 0x44, 0x8c, 0xc6,
	0x84, 0x74, 0xdb, 0x43, 0x9d, 0x84, 0x76, 0xea, 0xcc, 0x14, 0xa3, 0x2f, 0xe0, 0x03, 0x79, 0xe7,
	0x95, 0x6f, 0xe0, 0x2b, 0x19, 0xfb, 0xbf, 0x4d, 0x41, 0xd0, 0x0b, 0xaf, 0x3a, 0x33, 0xe7, 0x3b,
	0xe7, 0xfb, 0xce, 0x9c, 0x73, 0x3a, 0xa0, 0x7f, 0x46, 0x9f, 0x4b, 0x39, 0xb0, 0xcf, 0x78, 0xe8,
	0x0c, 0x1c, 0x4b, 0x59, 0x27, 0x02, 0x5d, 0x26, 0x95, 0xf8, 0x64, 0x06, 0x82, 0x2b, 0x4e, 0x66,
	0x62, 0x84, 0x19, 0x21, 0x7a, 0xb5, 0x78, 0x1b, 0xd9, 0x39, 0x8a, 0x18, 0xdf, 0x5b, 0x76, 0x39,
	0x77, 0xcf, 0x70, 0x10, 0xed, 0xc6, 0xe1, 0xe9, 0x40, 0x2a, 0x11, 0xda, 0x2a, 0xb6, 0x1a, 0xdf,
	0x35, 0x80, 0x1d, 0x3c, 0x65, 0x3e, 0x53, 0x8c, 0xfb, 0x64, 0x11, 0xa6, 0x3d, 0x54, 0x82, 0xd9,
	0x5d, 0x4d, 0xd7, 0xfa, 0x2d, 0x9a, 0xec, 0xc8, 0x2a, 0x80, 0xc3, 0x3c, 0xf4, 0x25, 0xe3, 0xbe,
	0xec, 0x36, 0xf4, 0x66, 0xbf, 0x45, 0x0b, 0x27, 0xe4, 0x09, 0xcc, 0x7a, 0xa8, 0xac, 0x5f, 0xfc,
	0xcf, 0x19, 0x9e, 0x39, 0xb2, 0xdb, 0xd4, 0xb5, 0x7e, 0x7b, 0xb8, 0x64, 0xc6, 0xec, 0x66, 0xca,
	0x6e, 0x1e, 0x45, 0xec, 0xb4, 0x02, 0x27, 0x9b, 0xd0, 0x0e, 0x03, 0xc7, 0x52, 0x78, 0xe2, 0x71,
	0x07, 0xbb, 0x93, 0xba, 0xd6, 0x9f, 0x1d, 0x76, 0xcd, 0x62, 0xae, 0xe6, 0xab, 0x08, 0x70, 0xc0,
	0x1d, 0xa4, 0x10, 0x66, 0x6b, 0xe3, 0xab, 0x06, 0x9d, 0x3c, 0x85, 0x18, 0x44, 0xd6, 0xe0, 0x86,
	0x93, 0x9d, 0x9d, 0x30, 0x27, 0xc9, 0x67, 0x26, 0x3f, 0xdc, 0x73, 0x6a, 0x54, 0x37, 0xfe, 0x4a,
	0x75, 0xf3, 0x1a, 0xaa, 0xbf, 0x68, 0xb0, 0x40, 0xa3, 0xca, 0xa2, 0x38, 0x88, 0x2e, 0x99, 0xe2,
	0x87, 0x10, 0xa5, 0x22, 0x1b, 0xa5, 0x1a, 0xb4, 0x87, 0xb7, 0xca, 0xf1, 0x62, 0xf0, 0x6b, 0x61,
	0x05, 0x01, 0x8a, 0xac, 0x40, 0x15, 0x25, 0x8d, 0x6b, 0x28, 0xf9, 0xa1, 0xc1, 0x5c, 0x62, 0x2a,
	0xe9, 0x58, 0x05, 0x60, 0xbe, 0x54, 0x96, 0x6f, 0xe3, 0x5e, 0x7a, 0x7f, 0x85, 0x93, 0x7f, 0x79,
	0x7b, 0x64, 0x19, 0x5a, 0x8a, 0x79, 0x28, 0x95, 0xe5, 0x05, 0x51, 0xb3, 0x34, 0x69, 0x7e, 0x60,
	0x04, 0xb0, 0x58, 0xbd, 0x5a, 0x19, 0x70, 0x5f, 0xe2, 0x6f, 0x73, 0x32, 0xa0, 0xd4, 0x21, 0x51,
	0x46, 0xd5, 0xae, 0x21, 0x30, 0xe9, 0x5b, 0x5e, 0xac, 0xb7, 0x45, 0xa3, 0xb5, 0xf1, 0x11, 0x56,
	0xca, 0x8c, 0xc7, 0x28, 0xc6, 0x5c, 0x62, 0x46, 0xfc, 0x14, 0xfe, 0x17, 0xc9, 0x3a, 0x29, 0xeb,
	0xdd, 0x72, 0xa2, 0xf5, 0x82, 0x69, 0xe6, 0x45, 0xe6, 0x61, 0x0a, 0x85, 0xe0, 0x22, 0xd1, 0x14,
	0x6f, 0x0c, 0x07, 0x96, 0xca, 0x9e, 0x32, 0xa3, 0xdc, 0x83, 0x56, 0xea, 0x2c, 0xbb, 0x9a, 0xde,
	0xec, 0xb7, 0x87, 0x0f, 0x2e, 0xe3, 0xac, 0x48, 0xa6, 0xb9, 0xb7, 0xf1, 0x18, 0x48, 0x3e, 0x61,
	0x19, 0x41, 0xf5, 0xb2, 0x6a, 0x46, 0xcc, 0x18, 0x42, 0x67, 0x17, 0xd5, 0xb5, 0x1a, 0xcb, 0xd8,
	0x82, 0x9b, 0x05, 0x9f, 0x84, 0xec, 0x61, 0x65, 0x2a, 0xe6, 0xeb, 0xa6, 0x22, 0x1d, 0x87, 0xfb,
	0x8f, 0x00, 0xf2, 0xce, 0x21, 0x2d, 0x98, 0x3a, 0x18, 0xd1, 0xdd, 0x51, 0x67, 0x82, 0xb4, 0xe1,
	0x3f, 0x3a, 0x3a, 0xdc, 0xdf, 0xda, 0x1e, 0x75, 0x34, 0x32, 0x0b, 0x90, 0x6c, 0xb6, 0xf6, 0xf7,
	0x3b, 0x8d, 0xe1, 0xb7, 0x49, 0x98, 0xdb, 0xb1, 0x94, 0x45, 0x93, 0x3f, 0xee, 0x11, 0x8a, 0x73,
	0x66, 0x23, 0xb1, 0x61, 0x7e, 0x5b, 0xa0, 0xa5, 0xf0, 0xa5, 0x28, 0x0e, 0x0a, 0x59, 0xbb, 0xbc,
	0x84, 0x51, 0xb6, 0xbd, 0x2b, 0xd5, 0xd9, 0x98, 0x20, 0x2e, 0x2c, 0xd4, 0x91, 0xc8, 0xab, 0xb1,
	0xdc, 0xbb, 0x0c, 0x24, 0x73, 0x9a, 0xbe, 0x46, 0xde, 0xc0, 0x4c, 0x29, 0x8b, 0x3b, 0xb5, 0x13,
	0xf7, 0x47, 0x39, 0x50, 0x20, 0xa9, 0xad, 0xf0, 0xa8, 0x54, 0x46, 0x3a, 0xb7, 0xf4, 0xf4, 0x8b,
	0x2c, 0x85, 0x98, 0xc7, 0xd0, 0x89, 0x25, 0x15, 0x22, 0xae, 0x5e, 0xe4, 0x17, 0x23, 0xaf, 0x14,
	0xf7, 0x05, 0xb4, 0xb2, 0x2e, 0xab, 0x06, 0xac, 0xb6, 0x6c, 0xef, 0xf6, 0x85, 0xf6, 0x34, 0xde,
	0xb3, 0x77, 0xb0, 0xc2, 0x85, 0x5b, 0xc6, 0x39, 0x85, 0x66, 0x3a, 0xd4, 0xde, 0x6e, 0xba, 0x4c,
	0xbd, 0x0f, 0xc7, 0xa6, 0xcd, 0xbd, 0x41, 0xf2, 0x6e, 0xc7, 0x9f, 0xf5, 0xf4, 0x57, 0x29, 0x07,
	0x2e, 0x2f, 0xbc, 0xe5, 0xeb, 0xe9, 0xdb, 0x3f, 0x9e, 0x8e, 0x10, 0x1b, 0x3f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x79, 0xf0, 0x54, 0x25, 0x20, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataRegistryServiceClient is the client API for DataRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataRegistryServiceClient interface {
	CreateOrUpdateMetric(ctx context.Context, in *RegisterMetricRequest, opts ...grpc.CallOption) (*RegisterMetricResponse, error)
	CreateOrUpdateMetrics(ctx context.Context, opts ...grpc.CallOption) (DataRegistryService_CreateOrUpdateMetricsClient, error)
	UpdateMetric(ctx context.Context, in *UpdateMetricRequest, opts ...grpc.CallOption) (*RegisterMetricResponse, error)
	RegisterDefinition(ctx context.Context, in *Definition, opts ...grpc.CallOption) (*DefinitionResponse, error)
	UpdateDefinition(ctx context.Context, in *DefinitionUpdate, opts ...grpc.CallOption) (*DefinitionResponse, error)
	GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error)
}

type dataRegistryServiceClient struct {
	cc *grpc.ClientConn
}

func NewDataRegistryServiceClient(cc *grpc.ClientConn) DataRegistryServiceClient {
	return &dataRegistryServiceClient{cc}
}

func (c *dataRegistryServiceClient) CreateOrUpdateMetric(ctx context.Context, in *RegisterMetricRequest, opts ...grpc.CallOption) (*RegisterMetricResponse, error) {
	out := new(RegisterMetricResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.DataRegistryService/CreateOrUpdateMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRegistryServiceClient) CreateOrUpdateMetrics(ctx context.Context, opts ...grpc.CallOption) (DataRegistryService_CreateOrUpdateMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataRegistryService_serviceDesc.Streams[0], "/zenoss.cloud.DataRegistryService/CreateOrUpdateMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataRegistryServiceCreateOrUpdateMetricsClient{stream}
	return x, nil
}

type DataRegistryService_CreateOrUpdateMetricsClient interface {
	Send(*RegisterMetricRequest) error
	CloseAndRecv() (*RegisterMetricsResponse, error)
	grpc.ClientStream
}

type dataRegistryServiceCreateOrUpdateMetricsClient struct {
	grpc.ClientStream
}

func (x *dataRegistryServiceCreateOrUpdateMetricsClient) Send(m *RegisterMetricRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataRegistryServiceCreateOrUpdateMetricsClient) CloseAndRecv() (*RegisterMetricsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RegisterMetricsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataRegistryServiceClient) UpdateMetric(ctx context.Context, in *UpdateMetricRequest, opts ...grpc.CallOption) (*RegisterMetricResponse, error) {
	out := new(RegisterMetricResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.DataRegistryService/UpdateMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRegistryServiceClient) RegisterDefinition(ctx context.Context, in *Definition, opts ...grpc.CallOption) (*DefinitionResponse, error) {
	out := new(DefinitionResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.DataRegistryService/RegisterDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRegistryServiceClient) UpdateDefinition(ctx context.Context, in *DefinitionUpdate, opts ...grpc.CallOption) (*DefinitionResponse, error) {
	out := new(DefinitionResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.DataRegistryService/UpdateDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRegistryServiceClient) GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*GetMetricResponse, error) {
	out := new(GetMetricResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.DataRegistryService/GetMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataRegistryServiceServer is the server API for DataRegistryService service.
type DataRegistryServiceServer interface {
	CreateOrUpdateMetric(context.Context, *RegisterMetricRequest) (*RegisterMetricResponse, error)
	CreateOrUpdateMetrics(DataRegistryService_CreateOrUpdateMetricsServer) error
	UpdateMetric(context.Context, *UpdateMetricRequest) (*RegisterMetricResponse, error)
	RegisterDefinition(context.Context, *Definition) (*DefinitionResponse, error)
	UpdateDefinition(context.Context, *DefinitionUpdate) (*DefinitionResponse, error)
	GetMetric(context.Context, *GetMetricRequest) (*GetMetricResponse, error)
}

// UnimplementedDataRegistryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataRegistryServiceServer struct {
}

func (*UnimplementedDataRegistryServiceServer) CreateOrUpdateMetric(ctx context.Context, req *RegisterMetricRequest) (*RegisterMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateMetric not implemented")
}
func (*UnimplementedDataRegistryServiceServer) CreateOrUpdateMetrics(srv DataRegistryService_CreateOrUpdateMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateOrUpdateMetrics not implemented")
}
func (*UnimplementedDataRegistryServiceServer) UpdateMetric(ctx context.Context, req *UpdateMetricRequest) (*RegisterMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetric not implemented")
}
func (*UnimplementedDataRegistryServiceServer) RegisterDefinition(ctx context.Context, req *Definition) (*DefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDefinition not implemented")
}
func (*UnimplementedDataRegistryServiceServer) UpdateDefinition(ctx context.Context, req *DefinitionUpdate) (*DefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefinition not implemented")
}
func (*UnimplementedDataRegistryServiceServer) GetMetric(ctx context.Context, req *GetMetricRequest) (*GetMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetric not implemented")
}

func RegisterDataRegistryServiceServer(s *grpc.Server, srv DataRegistryServiceServer) {
	s.RegisterService(&_DataRegistryService_serviceDesc, srv)
}

func _DataRegistryService_CreateOrUpdateMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRegistryServiceServer).CreateOrUpdateMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.DataRegistryService/CreateOrUpdateMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRegistryServiceServer).CreateOrUpdateMetric(ctx, req.(*RegisterMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRegistryService_CreateOrUpdateMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataRegistryServiceServer).CreateOrUpdateMetrics(&dataRegistryServiceCreateOrUpdateMetricsServer{stream})
}

type DataRegistryService_CreateOrUpdateMetricsServer interface {
	SendAndClose(*RegisterMetricsResponse) error
	Recv() (*RegisterMetricRequest, error)
	grpc.ServerStream
}

type dataRegistryServiceCreateOrUpdateMetricsServer struct {
	grpc.ServerStream
}

func (x *dataRegistryServiceCreateOrUpdateMetricsServer) SendAndClose(m *RegisterMetricsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataRegistryServiceCreateOrUpdateMetricsServer) Recv() (*RegisterMetricRequest, error) {
	m := new(RegisterMetricRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataRegistryService_UpdateMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRegistryServiceServer).UpdateMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.DataRegistryService/UpdateMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRegistryServiceServer).UpdateMetric(ctx, req.(*UpdateMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRegistryService_RegisterDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Definition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRegistryServiceServer).RegisterDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.DataRegistryService/RegisterDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRegistryServiceServer).RegisterDefinition(ctx, req.(*Definition))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRegistryService_UpdateDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefinitionUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRegistryServiceServer).UpdateDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.DataRegistryService/UpdateDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRegistryServiceServer).UpdateDefinition(ctx, req.(*DefinitionUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRegistryService_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRegistryServiceServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.DataRegistryService/GetMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRegistryServiceServer).GetMetric(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataRegistryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.DataRegistryService",
	HandlerType: (*DataRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateMetric",
			Handler:    _DataRegistryService_CreateOrUpdateMetric_Handler,
		},
		{
			MethodName: "UpdateMetric",
			Handler:    _DataRegistryService_UpdateMetric_Handler,
		},
		{
			MethodName: "RegisterDefinition",
			Handler:    _DataRegistryService_RegisterDefinition_Handler,
		},
		{
			MethodName: "UpdateDefinition",
			Handler:    _DataRegistryService_UpdateDefinition_Handler,
		},
		{
			MethodName: "GetMetric",
			Handler:    _DataRegistryService_GetMetric_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateOrUpdateMetrics",
			Handler:       _DataRegistryService_CreateOrUpdateMetrics_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "zenoss/cloud/data_registry.proto",
}
