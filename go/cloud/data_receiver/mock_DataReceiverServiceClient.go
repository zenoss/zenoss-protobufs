// Code generated by mockery v2.12.2. DO NOT EDIT.

package data_receiver

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockDataReceiverServiceClient is an autogenerated mock type for the DataReceiverServiceClient type
type MockDataReceiverServiceClient struct {
	mock.Mock
}

type MockDataReceiverServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataReceiverServiceClient) EXPECT() *MockDataReceiverServiceClient_Expecter {
	return &MockDataReceiverServiceClient_Expecter{mock: &_m.Mock}
}

// PutEvent provides a mock function with given fields: ctx, opts
func (_m *MockDataReceiverServiceClient) PutEvent(ctx context.Context, opts ...grpc.CallOption) (DataReceiverService_PutEventClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 DataReceiverService_PutEventClient
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) DataReceiverService_PutEventClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DataReceiverService_PutEventClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataReceiverServiceClient_PutEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutEvent'
type MockDataReceiverServiceClient_PutEvent_Call struct {
	*mock.Call
}

// PutEvent is a helper method to define mock.On call
//  - ctx context.Context
//  - opts ...grpc.CallOption
func (_e *MockDataReceiverServiceClient_Expecter) PutEvent(ctx interface{}, opts ...interface{}) *MockDataReceiverServiceClient_PutEvent_Call {
	return &MockDataReceiverServiceClient_PutEvent_Call{Call: _e.mock.On("PutEvent",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockDataReceiverServiceClient_PutEvent_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockDataReceiverServiceClient_PutEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockDataReceiverServiceClient_PutEvent_Call) Return(_a0 DataReceiverService_PutEventClient, _a1 error) *MockDataReceiverServiceClient_PutEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutEvents provides a mock function with given fields: ctx, in, opts
func (_m *MockDataReceiverServiceClient) PutEvents(ctx context.Context, in *Events, opts ...grpc.CallOption) (*EventStatusResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *EventStatusResult
	if rf, ok := ret.Get(0).(func(context.Context, *Events, ...grpc.CallOption) *EventStatusResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventStatusResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Events, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataReceiverServiceClient_PutEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutEvents'
type MockDataReceiverServiceClient_PutEvents_Call struct {
	*mock.Call
}

// PutEvents is a helper method to define mock.On call
//  - ctx context.Context
//  - in *Events
//  - opts ...grpc.CallOption
func (_e *MockDataReceiverServiceClient_Expecter) PutEvents(ctx interface{}, in interface{}, opts ...interface{}) *MockDataReceiverServiceClient_PutEvents_Call {
	return &MockDataReceiverServiceClient_PutEvents_Call{Call: _e.mock.On("PutEvents",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDataReceiverServiceClient_PutEvents_Call) Run(run func(ctx context.Context, in *Events, opts ...grpc.CallOption)) *MockDataReceiverServiceClient_PutEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*Events), variadicArgs...)
	})
	return _c
}

func (_c *MockDataReceiverServiceClient_PutEvents_Call) Return(_a0 *EventStatusResult, _a1 error) *MockDataReceiverServiceClient_PutEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutMetric provides a mock function with given fields: ctx, opts
func (_m *MockDataReceiverServiceClient) PutMetric(ctx context.Context, opts ...grpc.CallOption) (DataReceiverService_PutMetricClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 DataReceiverService_PutMetricClient
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) DataReceiverService_PutMetricClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DataReceiverService_PutMetricClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataReceiverServiceClient_PutMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMetric'
type MockDataReceiverServiceClient_PutMetric_Call struct {
	*mock.Call
}

// PutMetric is a helper method to define mock.On call
//  - ctx context.Context
//  - opts ...grpc.CallOption
func (_e *MockDataReceiverServiceClient_Expecter) PutMetric(ctx interface{}, opts ...interface{}) *MockDataReceiverServiceClient_PutMetric_Call {
	return &MockDataReceiverServiceClient_PutMetric_Call{Call: _e.mock.On("PutMetric",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockDataReceiverServiceClient_PutMetric_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockDataReceiverServiceClient_PutMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockDataReceiverServiceClient_PutMetric_Call) Return(_a0 DataReceiverService_PutMetricClient, _a1 error) *MockDataReceiverServiceClient_PutMetric_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutMetrics provides a mock function with given fields: ctx, in, opts
func (_m *MockDataReceiverServiceClient) PutMetrics(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*StatusResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *StatusResult
	if rf, ok := ret.Get(0).(func(context.Context, *Metrics, ...grpc.CallOption) *StatusResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Metrics, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataReceiverServiceClient_PutMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMetrics'
type MockDataReceiverServiceClient_PutMetrics_Call struct {
	*mock.Call
}

// PutMetrics is a helper method to define mock.On call
//  - ctx context.Context
//  - in *Metrics
//  - opts ...grpc.CallOption
func (_e *MockDataReceiverServiceClient_Expecter) PutMetrics(ctx interface{}, in interface{}, opts ...interface{}) *MockDataReceiverServiceClient_PutMetrics_Call {
	return &MockDataReceiverServiceClient_PutMetrics_Call{Call: _e.mock.On("PutMetrics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDataReceiverServiceClient_PutMetrics_Call) Run(run func(ctx context.Context, in *Metrics, opts ...grpc.CallOption)) *MockDataReceiverServiceClient_PutMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*Metrics), variadicArgs...)
	})
	return _c
}

func (_c *MockDataReceiverServiceClient_PutMetrics_Call) Return(_a0 *StatusResult, _a1 error) *MockDataReceiverServiceClient_PutMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutModels provides a mock function with given fields: ctx, in, opts
func (_m *MockDataReceiverServiceClient) PutModels(ctx context.Context, in *Models, opts ...grpc.CallOption) (*ModelStatusResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ModelStatusResult
	if rf, ok := ret.Get(0).(func(context.Context, *Models, ...grpc.CallOption) *ModelStatusResult); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ModelStatusResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Models, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataReceiverServiceClient_PutModels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutModels'
type MockDataReceiverServiceClient_PutModels_Call struct {
	*mock.Call
}

// PutModels is a helper method to define mock.On call
//  - ctx context.Context
//  - in *Models
//  - opts ...grpc.CallOption
func (_e *MockDataReceiverServiceClient_Expecter) PutModels(ctx interface{}, in interface{}, opts ...interface{}) *MockDataReceiverServiceClient_PutModels_Call {
	return &MockDataReceiverServiceClient_PutModels_Call{Call: _e.mock.On("PutModels",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDataReceiverServiceClient_PutModels_Call) Run(run func(ctx context.Context, in *Models, opts ...grpc.CallOption)) *MockDataReceiverServiceClient_PutModels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*Models), variadicArgs...)
	})
	return _c
}

func (_c *MockDataReceiverServiceClient_PutModels_Call) Return(_a0 *ModelStatusResult, _a1 error) *MockDataReceiverServiceClient_PutModels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewMockDataReceiverServiceClient creates a new instance of MockDataReceiverServiceClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDataReceiverServiceClient(t testing.TB) *MockDataReceiverServiceClient {
	mock := &MockDataReceiverServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
