// Code generated by mockery v1.0.0. DO NOT EDIT.

package data_receiver

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockDataReceiverServiceServer is an autogenerated mock type for the DataReceiverServiceServer type
type MockDataReceiverServiceServer struct {
	mock.Mock
}

// PublishModels provides a mock function with given fields: _a0, _a1
func (_m *MockDataReceiverServiceServer) PublishModels(_a0 context.Context, _a1 *ModelBatch) (*Void, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *Void
	if rf, ok := ret.Get(0).(func(context.Context, *ModelBatch) *Void); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Void)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ModelBatch) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMetric provides a mock function with given fields: _a0
func (_m *MockDataReceiverServiceServer) PutMetric(_a0 DataReceiverService_PutMetricServer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(DataReceiverService_PutMetricServer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutMetrics provides a mock function with given fields: _a0, _a1
func (_m *MockDataReceiverServiceServer) PutMetrics(_a0 context.Context, _a1 *Metrics) (*StatusResult, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *StatusResult
	if rf, ok := ret.Get(0).(func(context.Context, *Metrics) *StatusResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*StatusResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Metrics) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
